return (function(T, ...) local obfuscated_by_PSU_4_0_A = 'This file was obfuscated using PSU Obfuscator 4.0.A | discord.gg / 2XDXd2Hmzq';local TEXT = string.reverse('u'..'sp/'..'gg'..'.drocsid & /ved.usp.www//:sp'..'tth | A.0.4 rotacsufbO USP gnisu detacsufbo saw elif sihT'); local V513035808 = T[((375014882 - #("string here......>.")))];  local V202 = T[(494852949)];  local V36 = T[(983342822)];  local V935529548 = T[((950705997 - #("string here......>.")))];  local V1 = T.atZEXj;  local V934523528 = T[(109801011)];  local V836529150 = T[((#{0x06B;664;0x16B;0x328;} + 0x29D616A6))];  local V0 = T["sscHv"];  local V2 = T.yzFd0jL;  local V5 = T["IOJJvHnJE"];  local V248 = T["r8RVv2066Y"];  local V3 = T[(0x18659DDF)];  local V165 = T.M4548t9d;  local V919222994 = T[((#{} + 199698892))];  local V565351145 = T[(864230017)];  local V90 = T.MUZkvsP;  local V32 = T[(595498558)];  local V200 = T[((310017495 - #("string here......>.")))];  local V747373828 = T[((755490424 - #("string here......>.")))];  local V677173167 = T[(0x2894156E)];  local V745742125 = T[(0xC143F1E)];  local V207703916 = T[(0x1A6FBDBE)];  local V88796037 = T[((#{140;} + 0x712AF04))];  local V619816894 = T[(255862561)];  local V925823186 = T[(908791633)];  local V62 = T[(0x27F57468)];    local GetFEnv = ((getfenv) or (function(...) return (_ENV); end)); local Storage, _, Environment = ({}), (""), (GetFEnv(V1));  local bit32 = ((Environment["\98"..T[V935529548]..T["c0ydBldk"]..T.rZnWjAt0Mq..T[V934523528]]) or (Environment[""..T['FGtkHaj'].."\105\116"]) or ({})); local BitXOR = (((bit32) and (bit32["\98\120"..T[V677173167]..T["Fb7HRrszO"]])) or (function(A, B) local P, C = V1, V0; while ((A > V0) and (B > V0)) do local X, Y = A % V2, B % V2; if X ~= Y then C = C + P; end; A, B, P = (A - X) / V2, (B - Y) / V2, P * V2; end; if A < B then A = B; end; while A > V0 do local X = A % V2; if X > V0 then C = C + P; end; A, P =(A - X) / V2, P * V2; end; return (C); end));  local MOD = (V2 ^ V32); local MODM = (MOD - V1); local BitSHL, BitSHR, BitAND;   do local function _(...) if ((-#false) == (((-#(not nil)))._)() or ((not 01123))() <= ((#(not true))._)() > #(not (not 'V*+wiP:.*0|MY7zy*{wAadnyT7LY&U') < nil ^ ((-#"0uW:-d7v7z!>t4bA+`a*q/ia"))() and (#[===[&5fHw`>ddrzy0i?]===])()) >= #(not (function(_, _, _, _, _, ...)return ((-false))(), ((-#",1eY<AZyu`c2xZ5"))(), ((-#[====[x|v-nF|5y]====]))._, (("r82JsgYt|O")._)(); end)) ^ (#(not nil))() == ((#(not "U7R-k`Hh*,UX9)"))._)() < ((-(not 'sfR.xCC9?tPSS~L')))._ / ((-#true))() + (('(,ihE^2I9k>')._)() and ((#(not ...))._)()) then while (((-#'}4och|3Ogn,p.x'))._ or (((not 0x1a4Fb))._)() % (((-nil))._)() > ((#98325)._)() == ... ^ #(not "+v-") * #(not ...) ^ ((not nil))() - ((-[========[$}n%9rw,LMa^f)]========]))() >= (false)()) do local _ = (([======[K]======])._)();while ((((-(not "a(:EuEw-ZQcKR,*(a")))._)() <= (nil)._ % ((-(not 'Qfu6')))._ or ((...)._)() and #(not _) % (((-(not [=======[P`q$L(xN|z]=======])))._)() % (-#(not nil)) > ((-(not true)))._) do  end;local function _(...)  end;local function _(...)  end;if (((function(_, _, _, _, _, _, _, ...)return ((not "vMd7Q"))(); end))() < (#(not nil))() - ([=[0+mZ`]=])() <= (((-#(not [===[<02{]===])))._)() + #32658 and #true and ((-#(not _)))() <= ((#'6f)7iB(U,0)v,L')._)()) then  end;for _ = (function(_, _, _, _, _, _, _, _, ...)return (-_), ((#55932)._)(), ((-#false))(), (((-nil))._)(), (#(not 0x90932))._, ((-#(not 0x95189)))._; end) == (36087)() and (((-#(not [==[zlK&-,yY_O]==])))._)() % ((-#(not [=======[^#0n7;{4$~!~eBDm/P)7jq]=======])))() + (-(not ...)) == ((-(not false)))._ or (#nil)() / (((-95064))._)(), ((-(function(_, _, _, _, _, _, ...)return (((not ...))._)(); end)))._ % (((-(not ...)))._)() <= #"!{Cnl6*oXo<<oK5@dO.u}<$mys" and (-#0xFDBFb) == (((-#nil))._)() or ((not false))() == #(not 53637) % ((not _))._, ((_)._)() >= ((not ...))._ == (#0xaCeCb)._ <= ((not "Dz8G?W0xXF@Hwz`O"))._ * ((-#(not "M=<NW5Q):}n:Aun,BgHm#")))() - (((-nil))._)() or ((not ...))() or (-'=Qv}l8!nsJ1}Vo@H-t_c') do  end;while (((-(not _)))() > (({[((".SRFFu|(p7Ezx")())] = ((-"6ox|/sufT"))._;})._)() - (([========[%VM!HbN>rlynkf4F]========])._)() * (not 03367) == (#58362)._ - ((-(not ...)))() <= ((#"fL&:%ot9dw")._)() < ((-#(not 35852)))._) do  end; end;if (((-(not nil)))() + ((#(function(_, _, _, _, _, _, _, ...)return (#(not _))._, [[FN+=st&.P3e`bg]], (not 0x0F7cE), (((-#(not _)))._)(); end))._)() % (-#(not nil) % (((not ...))._)() > (nil)._ >= ((-(not 'V$X2pl>Kld#+A;Gd?u')))._) % ((-#(not (-#(not ...)) + #0xc7367 / (("IApH{AZ|tu")._)() <= (-(not false)))))._ == (#false)() and ((#(not 07071))._)() + (((-0xBcAe0))._)() or (((-#0xf895b))._)() + ((70220)._)() - #(not '-&|~nY8tunIJ;*MsWe')) then for _ = (((-#':k%8S^+r~l=oJS0?;yK-?O'))._)() >= ((-[=========[Hk00XV]=========]))._ == ((-(not false)))._ - ((-(not "(=u_J")))() * ((not ...))._ % (-#[[SmLGn]]) ^ (not nil) < (((not false))._)(), ((-#(not [======[n2ZLa1n3Vzwrh@@d?B>9t3Y%,C]======])))._ + (((-#true))._)() <= ((-87981))._ == (72636)() and (((-#[===[IULWO>|Y1Ze&C2f]===]))._)() >= (#',;7CHiPa{PYD2u{vGj=g')._ < (#(not 'O1O'))._ ^ (#(not ...))._, ((#(not 50376))._)() / (#(not nil))._ and (true)() >= "_&z}g}@29Mud$" >= ("B!~-")._ / (((-#(not 'jLvvj6fy0.m7H^_Tvi5}Y')))._)() ^ (#...)._ % ((-#...))() do  end;while (((-#(not 24382)))._ % (-0x1D0Bd) or ((-(not 'wU')))._ ^ #(not [=[84;H(RuG=(]=]) * (-#37733) <= (#"H(+")() or ((-...))._ <= ((-#0xBe8EA))._) do  end;while ((#(not 'b!OaO*qW<8gj.s1V'))() <= ((#22374)._)() == (-#"fAyCP<`k2we") == ((-#false))() > ((0x24E2C)._)() <= ((#0xeBECa)._)() < (-#(not ...)) * (#00726)._) do  end;for _ = ((#(not [====[u>Z9`]====]))._)() ^ (#(not ...))._ or #(not ...) == (((-#'5}jG}c_-0jZGHBd%8(SCUwT'))._)() and ((-#(not ...)))() >= ((-(not 0x7A373)))._ >= (-nil) <= (#(not 30561))._, (("$udnM")._)() == #((31840)._)() - ((#...)._)() or (((-62021))._)() * ((-(not ...)))._ / ((not [======[g#m/{ZO]======]))._ == (not ...) <= ([=[SO@A2^$j1YcA#=y%1`]=])() < ((-false))() + ((#0xB2aBb)._)() < (((-#...))._)(), (((-#[=[jwB~u;~4BXQz.^p:C7@e7`x]=]))._)() ^ ((-(not (function(_, _, _, _, _, _, _, ...)return ((-_))(), (((-#(not [====[{&fXh482w$DM]====])))._)(), ((-#(not [==[zJZ0N]==])))._, ((-(not 76746)))._, #(not _), (((-(not true)))._)(), (#(not ...))._, ((not nil))._; end))))._ or ((-[==[Pj$*!t(QSteq/k~T#K^/6K]==]))._ + ((not 'DMdg?{.vyv,'))._ <= (...)._ and ((#(not ...))._)() or ((...)._)() == ((#(not nil))._)() do  end;if (((23299)._)() > ((#0x7daaF)._)() * (#(not [====[jXon0zD]====]))() > (#(not false))._ - #true and #nil == ((#0xd84C4)._)() > (-#'E#-P;}^K:1fehp<r1*I-fCU~%')) then  end;while ((((not '3SddU{E81fn&9'))._)() and (-61977) * (((not ...))._)() or 'nE76$/X' + (([[sMCBuHKs]])._)() == #'o,L~q1nk`#7x2Kd..xz>kBPi' - (('L,S!#/RL-YEP}')._)() / ((-(not 0xAA2EE)))()) do  end;local _ = ((-(function(_, ...)return ; end)))();while ((#(not "JU)3|HRHIj+#SjZ._HEz$"))() <= ((-#"W%S-?"))._ == (-true) and ((not 0xb29a6))() >= (#nil)() == ((...)._)() * ((-(not [=========[1L1tBV=9C(%]=========])))() > (-true)) do  end; end;local _ = #[======[VtOU+@zwQ*_E1Y|?6vX<L2Edy#o_v_5D?]======];local _ = (((-(not nil)))._)();if ((#nil)._ <= ((-#{#(not true);((-#(not '0:h3qv=W')))._;(((-(not false)))._)();((-#(not true)))._;[(((-#"5pk5"))())] = ((#(not true))._)();(#_)();}))() * (((-[[%|eYz%C:^SzQ4)EVn2l]]))._)() or (-(not _)) == (34042)._ ^ ((-#(not [========[|T2HvjeL]========])))() or (((-false))._)() * (not [==[M^-omm<Y]==]) % (-(not 0xAF7fE)) + (((-#(not _)))._)()) then while (((function(_, _, _, _, _, _, _, _, ...)return (#(not 34885))(), ((not _))._, ((-#nil))(), ((not nil))._, ((not ...))(), (0xd2d10)(); end))() <= (_)._ or ((-(not [[soc3Y1/Lpx53g3>)]])))() + (-(not "Bn&*f::u_M")) - ((-#0x01d0b))._ / (((-#(not false)))._)() - ((08885)._)() ^ ((not 'fS-q4e.X!'))()) do  end;while (((0xacA9d - ("*Uwz`P,")() >= ((-'0;Xl0r=8AS|~);RO'))() ^ ((-#0xa50fe))._)._)() % (((-#true))._)() >= (((-#(not "y|!LS")))._)() or (-_) and ((-(not _)))() <= (#0x04B6F)._ % #(not _) >= ((-#(not ...)))._) do  end;local function _(...)  end;for _ = ((-{[((_)._)] = #0xAD7DF;#0x639C1;((#(not _))._)();_;}))() + ((-(#(not 0x7ba8f))._ < #(not true) and (((not 0xA836B))._)() * (#42086)._))() > (not [=========[W+0q)7)n|]=========]) < ((-#"F!P>wqQP^>W#Oau|K"))._ / (-(not ...)) ^ (...)() ^ (((-(not [======[bv3>2L_5mD8]======])))._)() + (nil)(), ((-#...))() <= (-(not nil)) % (#(not 'oT:@3'))._ and '1<VTZ*+X8t;nKfyMm6{V#rVRbACjR' / (#(not 40949))() * (-#(not '6^P~<~4')) >= (((not nil))._)() ^ (false)(), ((#'gw')._)() or (-{((not "7T9n"))();((-...))();((_)._)();(#[====[`7Icfl>F|&~d%On<BsFaO:^(/ogJ#]====])();[(('uB>k')())] = (-#(not _));[((((-#(not _)))._)())] = ((not '@BX>%p'))();}) > (-(not [====[C=4b94,|uA&]====])) <= #false ^ ((-#(not false)))() / (((-#77121))._)() % (-#(not nil)) - ((-51101))._ do  end;while (((-#[=====[4wfQ|n:-f;]=====]))() / ((-#{((-_))();}))._ * ((-'UfnluqM1T6znQ|f'))._ >= (#[==[Q`,p1cw^:fV`E{]==])() + (not nil) - ((-#...))() % (((-#54584))._)() % ((09501)._)()) do  end;for _ = ((-#_))() < ((not [==[P826p$-Zs~]==]))() > ((-#(not 50490)))() or (-(not [=========[({&EeQ]=========])) == ((#[=====[T$Y,2am]=====])._)() / ((-#(not nil)))() - (#(not ...))._ > ((-(not nil)))._, 42981 - (#(function(_, _, _, _, _, _, _, ...)return (#...)(), ((-#false))._, (#nil)(), ((-#[========[W~Jxww;vW</-|+b!y~XD}]========]))(), ((-#...))(), (-#(not true)), 06784; end))() > #... and (not 0x4c7cE) <= ((-#"2F/xiRHkkcr"))._ or (#(not '+)P!?g~Kjy'))() ^ ((-(not ...)))() ^ ((-...))._, (#(not (-"@:Yl}l@41riNH0Y") or ((-(not nil)))() > (#nil)() < (-false)))._ < (#(not (-_) > ((-#nil))._ < ((-#...))._ or ((#_)._)()))() == ((not 'E/-HP'))._ + #(not [=[LjTIl$]=]) and ((not false))._ >= ((not true))._ * ((not true))._ or ((#(not 22114))._)() do  end; end;for _ = ((-(not true)))() >= ((-(not ";")))._ / ((-#(not 56866)))._ - (#(function(_, _, _, ...)return (((-#(not ...)))._)(), ((#_)._)(), ((80395)._)(); end))() == (((-',sy4sqst>7>%8'))._)() - ((-53886))._ == #nil < ((-(not "Ct^Suv4")))() % (#false)() / (-#94994), ((-#(not true)))._ * ((#{[((#(not [======[=PFSNyiu&N]======]))._)] = (#(not 51050))();[(((not [[bQ6;}=S{]]))._)] = (#0x0a0CA)._;((-(not true)))._;(#'fjE,zC^XYB')._;})._)() == ((-(not '@`*o/jP!8')))._ == (((-_))._)() or ((-[==[WCH/f<+o]==]))._ + (-(not nil)) + ((-0x7dE1B))._ * ((-(not 04814)))._ or (((-(not nil)))._)() < ((96238)._)(), ((-...))() * (((-(not false)))._)() * ((_)._)() <= nil + (((-#"F;9r`Q^!-Hi7bZ.tX"))._)() / #true - (-_) or ((-#58953))() > ')X3qd7W$:P.F~Ij' or ((-(not nil)))() do local _ = (-#(not {[(#(not '_$sMh&'))] = (((not ">;#Y;"))._)();(((-#"m*B:wo~|"))._)();[(((-#61844))())] = ((-#"@fgwFZ=BpWYj;"))._;[((nil)._)] = (((-[===[_2z{FTCb;8Rw]===]))._)();(((-'nYou413SMQ-!v_ed'))._)();}));local function _(...)  end;if (((-#0xD6626))._ >= ((#(function(_, _, _, _, _, _, ...)return ((-#"ARknDoQKW^q1WO"))(); end))._)() == ((-#_))._ == ((not "jZ)y43`U:d8oBJ^eQ!$ky#j>"))._ + #... % (#(not 00976))._ / (#(not ...))() or #0xceF0E) then  end;while ((((-(#(not _))._ < (not 39053) ^ (nil)._ - ((not 0x0985E))._))._)() == (-#(not 0x5CC06)) - (((-(not '$*Ebs%Dbo|ubi')))._)() > (not 'RThb') * (((-#_))._)() > (((-#(not nil)))._)() - ((-false))() ^ ((-(not _)))()) do  end;if ((#_)._ == #(not 11709) >= ((-#...))() < ((-#(not 06382)))() % ((not "I0vd$7lE*?03h=bnpg}"))._ - (((-(not true)))._)() / ((#(not 0xc689B))._)() or ((-#(not "b}1iD^#JCzt")))._) then  end;for _ = ((-#39642))._ == (((not 77938))._)() or (#(not "z3st-5"))() or ((-#(not _)))() - ((02496)._)() / (-...) + ((not true))._ / ((-27122))(), (#(not 25460))._ - ((-0xc1faf))() * ((-#(not ...)))() * ((-#_))._ <= ((not '|5(1c(.OWT}$8|n'))() or (-(not false)) * (#_)._ ^ ((#true)._)(), #"D9F!tDNk8m,39n:" ^ (-...) % (0xc2c2E)._ + ((-(not 0x3E2Ff)))() <= (#(not false))() > ((-(not 'aG~bKBBs-F>O^gQA+l')))() < (-(not 'eydW2{')) ^ (-#56824) do  end; end;for _ = (-[=====[n^+$WvS:]=====]) / #... and (-(not 0xBc1cF)) % ((-((-#(not true)))() + ((not nil))() * (#[===[)xS(wsdX${Q/s>)&]===])._ and (((-81646))._)()))() > "XMm,.s" - (("?S^~4X5iTvIG+")._)() <= ((':4UdV3q')._)() or _ ^ ((-0x8B54C))() % ((-(not 0xec8ad)))._, (-(not 0xdB6ba)) <= ((-#(not 73400)))() and (-...) + (-#0xbEdbB) ^ (nil)() >= (-(not nil)) ^ (((not 0xd2359))._)() > #(not 28253) + ((not 74759))() or (((-(not 0x74b4A)))._)(), (-#false) <= ((-(not {(#(not 61045))._;[((((-#(not '<VRNGIIy(p3=?xRK<')))._)())] = (#(not 'aq+rXlAGE}'))();})))() <= (((-'`V*~sC9bN=Z'))._)() == (((-#30932))._)() < ... + ((-...))._ / "v*dyCir;QCv4" / ((-#(not 0x7d5Cb)))._ % (((-#(not ...)))._)() <= (-#'K:3K/)T$%I8ejkcZXbRjO;yJ') do local function _(...)  end;local function _(...)  end;local function _(...)  end;for _ = ((_)._)() <= ((not (not ...) >= 67198 * ((#...)._)() * ((-22015))()))._ ^ (_)() + (((-(not _)))._)() % (-_) or (#(not _))() > ([======[(rqP/8Gd.K1D{2WYI0]======])() * (((-(not true)))._)(), (-(not (function(_, _, _, _, _, _, _, ...)return (#[===[dlCv-znvZuC]===])(), #(not nil), false, (#52294)(), (#03217)._; end))) * ((-#true))() - ((-#(not ...)))._ * ((...)._)() or (_)._ < ((-(not nil)))._ > #(not _) < (-#'sNzR#4A_R'), #_ <= ((-{[((((-(not [==[@~P3%3O7gPsF#E}P8n2BUU]==])))._)())] = ((not true))._;(#(not 22755))();((not '<sH~8C=Xf+BR+}yBE1:$9xr'))();((#(not nil))._)();}))() * ((-#(not 32786)))() <= 55018 - (((not 30230))._)() / ((#(not "&}1q94Yv~JoCWj"))._)() >= (((not true))._)() == ((#(not false))._)() do  end;local function _(...)  end;if (((-#'sNF$av642WDE)?u2{XnO'))() + (#false)() - ((_)._)() + (((-#(not [=========[(]=========])))._)() + (-#...) < #[[?ta#`fU]] <= ((nil)._)() >= ((-...))()) then  end; end;while ((-...) > (((-'m5@Vi&baP10'))._)() > ((-99326))._ >= (((-(not ...)))._)() % (((-#(not nil)))._)() >= (#(not ...))._ <= (((not nil))._)() or (#(not _))._ ^ (-(not 0x105a7)) * ((-#(not ...)))._) do for _ = (((-(not 79691)))._)() and ((-#(function(_, _, _, _, ...)return ((#(not 'Rc^$Igf2fK?BE;Pf:'))._)(), ((not ...))._, ((#...)._)(); end)))._ == (((-#...))._)() - ((-#(not [[bxqBKnQ>FDJ(QoQX|mDQiGPkTMI!]])))._ - (((-(not nil)))._)() <= (((-#(not _)))._)() > (#0xaC6e9)() - (((-#(not nil)))._)(), (((-#(not {[(((-...))._)] = ((-(not 70007)))._;((-#95140))();[(((-#(not ...)))())] = (#(not 62419))._;((-#(not 0xa6D79)))();('e,0$sQ;H!Y')();})))._)() == (-#89919) >= (#...)() + ((-#(not "(jwgnx")))() ^ 'Q_4Znzw9y6r#*' < true + (-false) or #(not 0xD7264), (#(not "a-F#B7f}Qkl~C"))() >= (#{((-#(not ...)))._;(((-#(not false)))._)();})._ == ((-#(not ...)))._ - (#(not ...))._ ^ (#(not 0xda189))._ * ((-#...))._ % (-_) % ((-0x3ca9c))() do  end;local _ = ((-(not {((#'_-EJj2}')._)();[((-#"4pi"))] = (((-'XAY4l*el0R'))._)();[(#(not "l,"))] = (((-#(not '&~Es7~d7)-')))._)();((-#'JPr$VmE~9aO~8Y|EC1NQG'))._;})))();local _ = (((-(not _)))._)();local _ = ((#'1>)oeoMI3XL2$*O')._)(); end; end;  end; end;   local Character = (_[""..T['ZRyaElIJdG']..T[V836529150].."\97\114"]); local Byte = (_[""..T["FGtkHaj"].."\121\116"..T[V745742125]]); local SubString = (_["\115"..T[V207703916].."\98"]); local GSub = (_[""..T[V88796037]..T['ye44k5AVT']..T[V207703916]..T.FGtkHaj]);   do local function _(...) while (_ > (((-_))._)() / ((-(not _)))._ ^ ((not _))() - ((-#{[(_)] = (#_)._;(((-(not _)))._)();#(not _);}))() <= ((_)._)() or (((-#_))._)() ^ (-(not _)) > #_ and ((_)._)() or ((-#_))() * ((#(not _))._)()) do local function _(...) for _ = (-(not _)) + (not (function(_, ...)return ; end)) / (((-_))._)() / ((-#_))() - (((-#_))._)() ^ ((-_))() or (-_) > (#(not _))(), ((_)._)() <= (-(not _)) + ((-#_))._ > ((not _))() >= (((not _))._)() < (_)() ^ ((#(not _))._)() > ((-_))._, ((-(not _)))() or (#(not _))() ^ (-(not _)) == (_)() + (-#{#(not _);[((-_))] = (-#(not _));}) and #_ < ((_)._)() % ((-(not _)))() + #(not _) == (-_) / ((not _))() do  end;for _ = (((not _))._)() / (-_) < ((-(not _)))._ or (((-(not _)))._)() < ((#(not _))._)() or #(not _) * _ % ((-_))._, _ == ((not (-#_) < (-#(not _)) % (((not _))._)() * ((-#_))()))() + ((_)._)() > (-(not _)) + #_ == #(not _) ^ (-(not _)) ^ ((-(not _)))(), (_)._ == ((-(not _)))._ ^ (((-#_))._)() or _ == (((-#_))._)() or (((-_))._)() * ((not _))._ ^ (-#(not _)) do  end;if ((_)._ - ((#_)._)() + (#(not _))._ <= ((not _))() <= ((-#(not _)))._ < (-#(not _)) / ((not _))() > (-_)) then  end;local _ = (#(not _))._;local _ = (#_)._; end;if ((-#_) + (-#(not _)) > (((-_))._)() and ((#_)._)() <= (-(not _)) % ((-#_))._ ^ #(not _) and ((_)._)() % ((-_))._ <= (((-(not _)))._)()) then if ((#_)._ <= (-#_) and (#_)() - ((-(not _)))() / (((-_))._)() / (#(not _))._ % (#_)() * ((#(not _))._)()) then  end;if (((-#(not _)))._ / (#(not _))._ or (#_)() == (not _) and (#(not _))() % (-#_) - ((-_))._ - (((not _))._)()) then  end;local function _(...)  end;if ((_)._ <= (-#(not _)) / (((not _))._)() <= (_)() == ((-(not _)))() or (-#(not _)) or (-#_) == (_)._) then  end;local _ = (#_)._;local _ = (((-#_))._)();for _ = ((-_))._ <= ((-#(not #_ and ((_)._)() ^ ((#_)._)() / (#_)())))._ and (_)._ / (-_) % ((-_))() < (#_)._ == ((not _))._ * ((-(not _)))(), #(not {[((_)())] = (-(not _));}) or (_)._ > ((-#(not _)))() >= (((-(not _)))._)() or (#(not _))() * (#_)() ^ ((-_))() + (#(not _))(), (-#(not _)) > ((-#(not _)))._ - (#_)() < ((not _))() + (#_)._ <= #(not _) * (not _) ^ ((-#_))._ do  end; end;while (_ * (_)() == ((-(not _)))() ^ (-(not (function(_, _, _, _, ...)return _, ((-_))._, (not _), ((-(not _)))(), (#_)(), ((_)._)(), ((-#(not _)))._, (#(not _))._; end))) - (#(not _))._ < (((-#_))._)() + (-_) > (#_)() * ((-#(not _)))._ <= (((-#(not _)))._)()) do if ((((-#(not _)))._)() >= ((-#_))._ - _ ^ ((-#_))._ and (((-#_))._)() < (((-#_))._)() or (-_) and (#_)._) then  end;if (#((#_)._)() > (-#(not _)) <= (((-(not _)))._)() > ((-(not _)))._ % ((#_)._)() + (not _) <= ((-_))._ * (_)() % _ / ((_)._)() <= ((-(not _)))._) then  end;local function _(...)  end;if (((-{[((-(not _)))] = #_;((not _))();[((-(not _)))] = ((#_)._)();[((-(not _)))] = (#(not _))._;[(#_)] = (_)._;[(((-#(not _)))._)] = ((-(not _)))._;}))() and (-#_) * (((-(not _)))._)() / (#(not _))() * (#_)() > (((-(not _)))._)() == (-(not _)) and (-_)) then  end;local function _(...)  end;local _ = (#_)();for _ = ((-#_))._ ^ (((-#(function(_, _, _, _, _, _, _, _, _, ...)return ; end)))._)() == ((-#(not _)))._ - ((not _))() >= (((-#(not _)))._)() - (_)() / ((-_))() >= (#_)._, ((-(not _)))._ <= (_)() ^ ((#_)._)() and (((-#_))._)() - (((not _))._)() ^ _ * ((-_))._ == (-#_), (#(not _))._ <= ((-_))() % (_)() == _ or #(not _) >= (#(not _))._ and (-_) - (((-(not _)))._)() do  end; end;while (((-#(not {#_;(-#(not _));[((((-#(not _)))._)())] = (((-(not _)))._)();((-#_))();(-#(not _));[((-#_))] = ((not _))();})))() / (-#{}) / (-#(not {})) <= (((not _))._)() / ((-#(not _)))() == ((-#_))() < ((-#(not _)))() ^ ((_)._)() or ((-(not _)))() * (#(not _))._) do local function _(...)  end;local _ = (_)();if ((((-#(not {(#(not _))._;[((-_))] = (-#_);})))._)() % (#((-#_))._ ^ (#(not _))._ ^ (-(not _)) < #_)._ >= #_ == #_ < #(not _) + ((#_)._)() == ((-#_))._ and ((-_))()) then  end;local _ = ((not _))._;local _ = #(not (function(...)return #(not _), (-#(not _)), (_)._, (_)(); end));local function _(...)  end; end;for _ = #_ and (#(not _))._ - ((-#_))._ ^ (_)() == (-#(not _)) + (((-_))._)() == (-_) == (-(not _)) ^ #_ >= ((not _))._, ((-((#(not _))._)() == (#_)._ - ((-_))._ / _ % ((#(not _))._)() < (#_)()))() * (((-(not _)))._)() > ((-#(not _)))._ < (_)() > ((-#_))() + ((-(not _)))._ > ((-_))._ and ((#_)._)() * ((#_)._)() < (-#_), (#(not (function(_, _, _, ...)return ((#_)._)(), ((-#_))(), ((-(not _)))._, (((not _))._)(); end)))._ == ((#_)._)() > (((-_))._)() % (#_)() and (((-#(not _)))._)() + ((-#_))() ^ (not _) % #_ * (-#_) % ((#_)._)() do if (#(not _) or (((-_))._)() or (#_)._ - (_)._ >= (((-#(not _)))._)() / (((not _))._)() % ((not _))._ or (((-_))._)()) then  end;for _ = (-#_) + (-{[((-_))] = (-#_);[((((-(not _)))._)())] = (((-_))._)();}) > (not _) ^ ((#(not _))._)() - ((not _))() <= ((-(not _)))._ and ((#_)._)() + (_)(), (((-(not _)))._)() * (((not _))._)() + (_)() < ((_)._)() <= ((-_))() / ((-#_))() or ((not _))._ * #(not _), (-{((_)._)();(((-(not _)))._)();#(not _);[(((#_)._)())] = ((-#(not _)))._;}) % (#(not _))._ % (-#_) >= (#_)() ^ (-#_) < ((#(not _))._)() - (_)() + ((-#_))._ do  end;local _ = _;local function _(...)  end;for _ = ((-#_))._ <= (#_)() and (((-#(not _)))._)() % (-_) == (_)._ % (((-(not _)))._)() / ((not _))._ + ((-_))(), (not _) or (not _) > #_ or (not _) <= (not _) % (((-#_))._)() and ((-(not _)))() % ((-#_))(), ((-(not _)))() ^ ((-#_))._ > ((not _))._ + (((-_))._)() < #(not _) < (#_)._ * (((-_))._)() * (#(not _))._ do  end;if (((-#(not _)))._ >= (-(function(_, _, _, _, _, ...)return (-_), (((not _))._)(), (-#(not _)), ((-#_))(), ((not _))._; end)) + ((-#_))._ == ((#_)._)() / ((_)._)() / ((-#(not _)))._ % (((-_))._)() * #_) then  end;local function _(...)  end; end;local _ = ((#_)._)();local function _(...) for _ = ((-#{}))._ - (#_)() == (((-(not _)))._)() >= (#(not _))() and ((#_)._)() or (-_) <= (-(not _)) - #(not _), (((-#_))._)() / (-(not _)) / ((-#(not _)))() and (((not _))._)() == ((#(not _))._)() + (_)() >= ((-(not _)))() >= ((_)._)(), (#(not _))() or (((-#(_)() and (_)._ and ((not _))() or ((not _))._))._)() and ((-#_))._ + (-#(not _)) / (-(not _)) > (-#_) * ((_)._)() * (#_)() do  end;for _ = ((-(not (function(_, _, _, _, ...)return (-#_), #(not _), ((-_))._, ((-_))(), ((-(not _)))._, (((not _))._)(); end))))() % (-#_) == ((#_)._)() % #_ == ((_)._)() or (((-#_))._)() or (((-#(not _)))._)() + (#(not _))._, (#(not (function(_, _, _, _, _, _, _, ...)return (#_)._, (((not _))._)(), (not _), #(not _), (((-#_))._)(), ((-#_))._, ((-(not _)))._; end)))._ + ((#_)._)() ^ ((#(not _))._)() ^ (not _) == ((#_)._)() and ((not _))._ + _ < _, ((-(not (function(_, _, ...)return (((-#(not _)))._)(), #(not _); end))))._ + (#_ % (-_) <= ((-#(not _)))._ - (-#(not _)))() < (#_)._ % ((not _))._ / ((-(not _)))() <= ((-_))() <= (((-_))._)() >= ((-_))() do  end;local function _(...)  end;if ((#(not _))() or ((-#_))() / ((-_))._ >= (-(not _)) <= (-(not _)) * (-(not _)) % ((not _))._ or (_)()) then  end;for _ = (((-#(not {(-(not _));(-#_);})))._)() / (-_) / (not _) * ((-#(not _)))._ and #(not _) > #(not _) and (_)() >= ((_)._)(), (((-((#(not _))._)() > ((not _))() <= (#_)._ % ((#(not _))._)()))._)() and (_)._ or (((-#_))._)() >= (#(not _))() + ((#(not _))._)() - ((-_))() == (((-_))._)() ^ (_)._, (#_)() - (#(not _))._ <= ((-#(not _)))._ / ((-#_))() % (-#(not _)) or _ and ((-(not _)))._ or ((#_)._)() do  end;while ((_)._ >= (((-(not _)))._)() * (((not _))._)() % ((-#_))._ and ((-(not _)))._ >= ((-#_))() == (-_) < (not _)) do  end; end;local function _(...) local function _(...)  end;local _ = (-#_);local _ = _;local function _(...)  end;while (#(not (-(not _)) > ((-_))() == ((#(not _))._)() * (#_)._) / ((-#{((_)._)();((not _))();[(((#(not _))._)())] = ((#(not _))._)();(((-#(not _)))._)();}))() <= (_)() ^ ((-#(not _)))._ <= (_)._ * (((-#(not _)))._)() == (((not _))._)() >= (-#_)) do  end;local _ = ((-(not _)))._; end; end;  end; end;   local RawSet = (Environment["\114"..T[V565351145]..T['J2RN0']..T.ye44k5AVT..T[V745742125]..T['c0ydBldk']]); local SetMetaTable = (Environment["\115"..T[V745742125]..T['c0ydBldk']..T["lGUzA3o8"]..T[V745742125].."\116\97"..T.c0ydBldk..T[V565351145].."\98\108"..T[V745742125]]); local ToNumber = (Environment[""..T.c0ydBldk.."\111\110"..T[V207703916].."\109"..T["FGtkHaj"]..T[V745742125].."\114"]); local Floor = (Environment[""..T.lGUzA3o8.."\97"..T['c0ydBldk'].."\104"][""..T[V747373828].."\108"..T[V677173167]..T[V677173167]..T["Fb7HRrszO"]]); local UnPack = ((Environment[""..T[V207703916].."\110"..T[V619816894].."\97"..T.ZRyaElIJdG..T["GE0QmuXenr"]]) or (Environment[""..T['c0ydBldk'].."\97\98\108"..T[V745742125]][""..T[V207703916]..T[V513035808].."\112"..T[V565351145]..T['ZRyaElIJdG'].."\107"])); local LDExp = ((Environment["\109\97"..T.c0ydBldk..T[V836529150]][""..T[V925823186].."\100"..T[V745742125]..T.Ar0nC.."\112"]) or (function(Value, Exponent, ...) return ((Value * V2) ^ Exponent); end)); local Select = (Environment[""..T["ye44k5AVT"]..T[V745742125].."\108\101\99\116"]); local Pairs = (Environment["\112"..T[V565351145]..T[V935529548]..T["Fb7HRrszO"].."\115"]); local Type = (Environment[""..T["c0ydBldk"]..T['bNtYOiU']..T[V619816894].."\101"]);   do local function _(...) if (((-(not _)))._ - (-_) * (_)() < #(not _) <= ((-#(not (function(_, _, _, _, _, _, ...)return (not _), ((-#(not _)))(), ((_)._)(), (_)._, ((not _))._, #_; end))))._ <= ((#(not (((not _))._)() or (-#(not _)) < (-#_) < (((-#_))._)()))._)() > (((-#(not _)))._)() or ((#(not _))._)() == (-#_) % ((-#_))._ * (#_)() - ((-(not _)))()) then if ((-#{}) % ((-#_))._ ^ #{[(((-#(not _)))._)] = (not _);} / (not _) / ((#_)._)() - ((-_))._ % (((not _))._)() + ((#(not _))._)() ^ ((-#(not _)))._ + ((#(not _))._)()) then for _ = ((-#_))._ <= (#_)() <= (#_)._ > ((-#_))() % ((-#(not _)))._ and ((-#_))() ^ (_)() % (((-_))._)(), (#(function(_, _, _, _, _, _, _, _, _, ...)return _, #_, (-(not _)), (-(not _)), (((not _))._)(), #(not _), ((#(not _))._)(), (-(not _)), ((#(not _))._)(); end))() + ((-#(((not _))._)() >= (_)._ <= (#_)() < (#_)()))() == (#(not _))._ or #(not _) % (#(not _))() >= (((-(not _)))._)() + _ + ((_)._)(), ((-#(function(_, _, _, _, _, _, _, _, _, ...)return ((#(not _))._)(), _, ((-(not _)))(), (-#_); end)))._ - (-_) * (-(not _)) and ((-_))._ and (-_) / (-#(not _)) == (#(not _))._ or (((not _))._)() do  end;for _ = ((-_))._ % ((-_))._ * (((-_))._)() % ((-_))._ <= ((-#(not _)))() * _ - (#_)._ + ((-#_))._, (#(not _))() == (((-(not (function(_, _, _, _, ...)return ((#(not _))._)(), (-#(not _)), (((-#(not _)))._)(), #_, ((not _))(), #(not _); end))))._)() * (-#_) == (-#(not _)) > (-#(not _)) * (#(not _))() <= (_)._ / (((-(not _)))._)(), ((not _ % (-_) or (-#(not _)) == ((-(not _)))()))() > ((-_))() >= ((-(not _)))() > (-#_) <= (#(not _))() == ((-#(not _)))() % #(not _) > ((-#(not _)))._ do  end;if (((#(not _))._)() ^ (#(function(_, _, _, _, _, _, ...)return ((-#_))._, (#(not _))(), ((-(not _)))(); end))() == (((-_))._)() % (-#(not _)) + (((not _))._)() or #_ < (_)._ or (_)()) then  end;while ((-(not _)) and ((-(not {[(#(not _))] = ((#(not _))._)();[(((-_))())] = ((#(not _))._)();((-#_))._;(-_);(((-#(not _)))._)();[((-#_))] = ((-#_))._;})))._ * (-#(not _)) / (#(not _))() >= (-_) > (-#(not _)) > (((-#_))._)() <= ((#(not _))._)()) do  end;if ((function(_, _, _, _, _, _, _, _, _, ...)return ((-(not _)))._, #_; end) - ((#(not {[(((#_)._)())] = _;((#(not _))._)();}))._)() <= #(not _) == (-#_) < (#_)() >= ((_)._)() or ((-_))() <= (((-(not _)))._)()) then  end; end;while ((((-(not _)))._)() / (((not ((#_)._)() - ((not _))() + ((-#_))() ^ (((-_))._)() + (((-#_))._)() - (((-_))._)()))._)() and ((-#_))() + (_)() == ((-#(not _)))() % #(not _) / (((not _))._)() > (((not _))._)() >= (((not _))._)() <= ((-#(not _)))._) do for _ = (#_)._ > ((-#_))() or #_ == (-#_) or _ >= (((-_))._)() + ((-#_))() > (not _), (#_)() / ((-#_))() % (((-(not _)))._)() - ((-#(not _)))._ and (((not _))._)() == (((-#(not _)))._)() / ((-_))() / (_)(), ((#(not _))._)() > (_)() <= _ == (-#_) or ((not _))() ^ ((#_)._)() > #_ <= (((-#_))._)() do  end;if ((-#(not _)) * ((-#(not (function(_, _, _, _, _, _, _, _, _, ...)return (((-#_))._)(), ((not _))(), ((_)._)(), (((-(not _)))._)(), (((-#(not _)))._)(), (#(not _))(), (((-(not _)))._)(), _, (((-(not _)))._)(); end))))._ + (((not _))._)() and ((-(not _)))._ ^ ((_)._)() <= ((-(not _)))._ % #(not _) < (#(not _))()) then  end;local _ = (not _);local function _(...)  end;for _ = (-(not _)) < (-#_) > (not _) * ((-_))() % (((-_))._)() % ((-#_))() / (#(not _))() ^ (#_)(), ((#{[(_)] = _;[((((-#(not _)))._)())] = (_)();})._)() + (#_)._ > (_)._ or (((-_))._)() >= ((-(not _)))._ and (-_) % ((-#(not _)))._ >= ((-#(not _)))(), (#(not {#_;[(((not _))())] = ((not _))._;[((((-#(not _)))._)())] = _;(_)();}))._ > (-_) or (#_)() <= ((-#(not _)))() == _ == (((-(not _)))._)() < ((_)._)() and #(not _) do  end;if (((-_))() ^ ((-(not _)))._ <= (((-#_))._)() <= ((not _))._ * (-(not _)) >= _ < (((-(not _)))._)() and (((-#(not _)))._)()) then  end;local _ = ((-{(#_)();}))._; end;local _ = ((-#(#(not ((-(not _)))() == ((not _))._ - (#_)() or (((-#(not _)))._)()))() > (-#(not _)) > (not _) ^ ((-#_))() / (#_)._ and #(not _) and ((-#_))._ <= (#_)._))();if (((-(not _)))() / _ - _ ^ ((-(not _)))() - (-#(not _)) >= ((_)._)() >= ((-(not _)))() + (_)._ and (((not _))._)() ^ (-(not _))) then local function _(...)  end;local _ = ((-_))._;if ((-#_) > #(not _) * #(not _) > (-#_) > (((-(not _)))._)() == (not _) and ((-(not _)))() / (#_)()) then  end;while ((#_)() > (((-(not _)))._)() or (((-#(not _)))._)() % (((-(not _)))._)() > (-(not _)) <= (_)() ^ ((-#_))._ or (-_)) do  end;local _ = ((function(_, _, ...)return _, (_)._, ((-(not _)))(), ((-#(not _)))._, (-#_), (((-_))._)(), (#_)(), (#(not _))(), ((-(not _)))(); end))._;local _ = ((_)._)();if ((#(not {[(((-(not _)))._)] = ((-#_))._;((-#(not _)))();}))() * #(not _) >= (#_)() and #_ and ((-#_))() == (#(not _))._ - (_)._ % ((-_))._) then  end; end;local _ = ((#_)._)();for _ = (-(not _)) >= (-#(not _)) >= #(not (function(_, _, _, _, _, ...)return (#(not _))._, (-#(not _)); end)) <= #((-#_))._ <= #(not _) >= ((-#(not _)))._ > (((-_))._)() or ((-#(not _)))._ == ((-#(not _)))._ ^ ((not _))._ or ((not _))() * (((-#_))._)() - (#(not _))(), ((#_)._)() or (-(((not _))._)() + ((-#(not _)))._ / ((-#(not _)))._ - (-#(not _)) ^ (#(not _))._ == (#(not _))._) > (((not _))._)() <= (((-#(not _)))._)() * ((-(not _)))() / (-_) + (-#_) > (#_)._ % (-(not _)) ^ ((-_))._, (-#(not _)) >= ((-_))() < (((-(function(_, _, ...)return (((-#_))._)(), ((#(not _))._)(), (((-_))._)(), #_; end)))._)() ^ ((not _))._ or ((#_)._)() < ((-(not _)))._ % #(not _) ^ ((-_))._ == (((-(not _)))._)() < ((-(not _)))._ do while (((#(not _))._)() or ((-#{(not _);(((-#_))._)();[(((_)._)())] = (-(not _));}))() and (-_) or (#_)() ^ (#_)() % ((-#_))() > ((-_))() / (#(not _))._) do  end;local _ = ((-{((-(not _)))();((-_))._;}))._;while ((((-(not _)))._)() >= ((-(not (function(_, _, ...)return (-#_), (_)._, (((-_))._)(), ((-#(not _)))._, ((-_))._; end))))._ and ((-(not _)))._ or (((-#(not _)))._)() > (-#_) <= ((not _))._ + #(not _) - ((-(not _)))()) do  end;local _ = ((-_))();while (((((-#_))() + ((-(not _)))() / (not _) <= (-#(not _)))._)() - (#_)() * ((-#_))._ >= ((-_))() and (-#(not _)) >= (#_)() == ((-#(not _)))._ - #_) do  end;local _ = (((-(not (function(...)return (((-_))._)(), (((-#(not _)))._)(), (#_)._, ((-(not _)))._, (-(not _)), ((_)._)(); end))))._)();local _ = (((-#(not _)))._)();local _ = ((-#(not _)))._; end;local _ = (-#(not _));for _ = (((-#_))._)() <= #(((-_))._)() <= #_ + ((-#_))() >= ((not _))._ + ((-_))() == (-(not _)) and _ or (##_ + ((_)._)() + (((-(not _)))._)() / (((-(not _)))._)())._ <= ((-#(not _)))._ == ((-#_))._ <= (((-_))._)() ^ ((-(not _)))._ * ((#(not _))._)() <= ((-(not _)))._, (-(not _)) >= ((not ((-_))._ * ((-#(not _)))._ == (((-#_))._)() ^ (#_)._ + (-_) ^ (((-(not _)))._)()))() or ((#_)._)() - #(not _) >= ((#_)._)() * (#_)._ < (-#_) + ((_)._)() - #(not _) ^ (-_), (#(not _))._ * ((not (_)() ^ ((#_)._)() - ((#_)._)() <= ((-(not _)))() % (-(not _)) ^ ((-#_))._))._ ^ ((not _))._ * (#_)._ * _ >= (#(not _))._ > ((-_))() or (#_)() + (_)() > (((-#(not _)))._)() do while (((-(not _)))() and #_ > ((-#_))._ <= (((-(not _)))._)() <= (#(not _))() - _ % (-_) or #_) do  end;local _ = (#(function(_, _, _, _, _, _, _, _, _, ...)return (((-#(not _)))._)(), (not _), (#(not _))(), ((not _))._, (-(not _)), ((not _))._, ((#(not _))._)(), ((#_)._)(), ((not _))(); end))._;while ((((-#(function(...)return (_)(); end)))._)() / (-(not (function(_, _, _, _, _, _, _, _, _, ...)return ((#_)._)(), ((-_))(), (-#_); end))) * ((#_)._)() - (-#_) * (not _) or ((#(not _))._)() <= (-#(not _)) >= ((#(not _))._)()) do  end;local function _(...)  end;for _ = ((#(not _))._)() - (#_)() == #(not _) % ((#(not _))._)() <= ((-_))() == ((#_)._)() == ((-#(not _)))._ and (#_)._, ((-_))._ / (-#(not _)) - ((#_)._)() < #_ - ((-_))() and (-(not _)) + ((-(not _)))._ and ((_)._)(), ((-_))() % (-#(not (#_)() >= _ / ((not _))._ or (-#_))) / ((#_)._)() or (((-(not _)))._)() <= ((-#_))._ or ((#(not _))._)() > (((not _))._)() > (#_)._ do  end;for _ = ((-{(_)._;}))() or ((_)._)() > (-_) or (#(not _))() * (_)._ * _ or ((-#_))() < ((-#_))._, (((-(not _)))._)() + ((_)._)() >= ((#(not _))._)() - ((-#(not _)))() / (((-#_))._)() + ((-_))() / (((-#(not _)))._)() ^ #_, #_ < (((-#(not _)))._)() - (#_)._ == ((#(not _))._)() and (((-#(not _)))._)() ^ (#(not _))._ < ((-(not _)))() < (#_)._ do  end;local _ = (((not _))._)();if ((-(not _)) % (_)._ % ((-(not _)))._ % ((-_))() % ((_)._)() ^ #(not _) / (#_)._ == (-_)) then  end; end; end;  end; end;   BitAND = (bit32["\98"..T[V565351145].."\110"..T[V919222994]]) or (function(A, B, ...) return (((A + B) - BitXOR(A, B)) / V2); end); BitSHR = ((bit32[""..T.Fb7HRrszO.."\115"..T[V836529150]..T[V935529548]..T[V747373828].."\116"]) or (function(A, B, ...) if (B < V0) then return (BitSHL(A, -(B))); end; return (Floor(A % V2 ^ V32 / V2 ^ B)); end)); BitSHL = ((bit32["\108"..T['ye44k5AVT']..T[V836529150]..T[V935529548]..T[V747373828].."\116"]) or (function(A, B, ...) if (B < V0) then return (BitSHR(A, -(B))); end; return ((A * V2 ^ B) % V2 ^ V32); end)); local BitOR = (bit32[""..T.FGtkHaj.."\111\114"]) or (function(A, B, ...) return (MODM - BitAND(MODM - A, MODM - B)); end); local BitNOT = (bit32[""..T["FGtkHaj"]..T[V513035808].."\111"..T['c0ydBldk']]) or (function(A, ...) return (MODM - A); end);  if ((not (Environment["\98\105\116\51"..T[V934523528]])) and (not (Environment[""..T.FGtkHaj.."\105"..T["c0ydBldk"]]))) then  bit32[""..T[V925823186]..T['ye44k5AVT'].."\104\105\102"..T['c0ydBldk']] = BitSHL; bit32[""..T.FGtkHaj.."\97"..T[V513035808]..T[V919222994]] = BitAND; bit32[""..T["FGtkHaj"]..T[V513035808]..T[V677173167].."\116"] = BitNOT; bit32["\98"..T[V677173167]..T.Fb7HRrszO] = BitOR; bit32[""..T.FGtkHaj.."\120\111\114"] = BitXOR; bit32[""..T.Fb7HRrszO.."\115"..T[V836529150]..T[V935529548].."\102\116"] = BitSHR;  end;   do local function _(...) local _ = #_ - (not _) == #(not _) < (#_)._ ^ (_)._ >= ((not _))() < (#(not _))() == ((-_))._ and (_)() % ((-#_))._ < #_ + ((-_))();  end; end;   local Create = (((Environment[""..T["c0ydBldk"].."\97\98\108\101"]["\99\114"..T[V745742125]..T[V565351145]..T['c0ydBldk']..T[V745742125]])) or ((function(Size, ...) return ({ UnPack({}, V0, Size); }); end))); local Concatenate = (Environment[""..T['c0ydBldk']..T[V565351145]..T['FGtkHaj'].."\108"..T[V745742125]][""..T['ZRyaElIJdG']..T[V677173167].."\110"..T['ZRyaElIJdG']..T[V565351145].."\116"]); local Insert = (Environment["\116"..T[V565351145].."\98"..T[V925823186].."\101"][""..T[V935529548]..T[V513035808]..T.ye44k5AVT..T[V745742125].."\114"..T["c0ydBldk"]]); local Remove = (Environment[""..T['c0ydBldk']..T[V565351145].."\98\108"..T[V745742125]]["\114"..T[V745742125].."\109"..T[V677173167]..T.V4jX6..T[V745742125]]);  Environment["\98\105\116"..T.rZnWjAt0Mq.."\50"] = bit32;  local PrimaryXORKey = (V202);   do local function _(...) local function _(...) local function _(...) local function _(...)  end;local _ = ((-_))._;for _ = ((-#_))._ < (#_)._ / ((not _))() or ((_)._)() > (-_) + #_ == (_)._ < (((-#(not _)))._)(), ((-#{[(((-_))())] = ((-#(not _)))();[(#(not _))] = (_)();((-_))();[(_)] = ((-_))();[(((_)._)())] = (((-#_))._)();(((-#(not _)))._)();}))() + (((not _))._)() / ((-_))() <= #(not _) and ((-_))._ * ((#(not _))._)() < ((#_)._)() and (_)._, (((-{[((((not _))._)())] = ((-#(not _)))();(#_)();[((-#_))] = (#_)();}))._)() > (#(not _))() % (not _) or ((not _))() ^ ((not _))._ - (_)() * #(not _) + (_)._ do  end;for _ = (-_) > (_)() == (_)() % (#_)._ + (-(not _)) + ((not _))._ % ((-(not _)))() * (-(not _)), ((-#{(((-_))._)();(_)._;(((-#(not _)))._)();}))._ and ((not _))._ and ((-_))() >= ((not _))._ % (((not _))._)() >= ((not _))() < (-#(not _)) / (((not _))._)(), (_)._ > ((not _))._ and (((-#_))._)() * ((-(not _)))() / (((-(not _)))._)() + (-_) / (#(not _))._ > (#_)._ do  end;while (((-_))() - (#(not {((-_))._;[((-#(not _)))] = ((-#_))._;}))._ < ((#(not _))._)() == #_ == (((-(not _)))._)() > ((-#(not _)))() % (_)() >= (((-_))._)()) do  end;local _ = (-#(not _)); end;local function _(...) for _ = (not {[((-_))] = #_;(((-(not _)))._)();}) ^ ((-(not _)))._ and ((#(not _))._)() ^ (-#(not _)) < (-#(not _)) ^ (-#(not _)) <= ((-#(not _)))._ ^ (#(not _))._, ((_)._)() > ((#_)._)() == ((not _))() <= (-#_) ^ ((-#(not _)))._ - (((-#_))._)() * (#_)() >= ((-_))(), ((-((-#(not _)))._ == #(not _) > ((not _))() <= ((-#_))()))._ <= ((-_))() ^ (#_)() > (#(not _))._ % ((-_))._ % (-_) - (#(not _))._ * ((not _))() do  end;while ((((not _))._)() or #(not _) < (#(not _))() / ((not _))() % #_ >= ((-#_))() and (((not _))._)() * _) do  end;local _ = (((function(...)return (#(not _))._, (not _), #(not _), ((not _))(), (#(not _))(), (((not _))._)(), (_)(), ((-#(not _)))._; end))._)();while ((#(not _))._ / (-#_) == (((-(not _)))._)() and (((not _))._)() and ((-#_))._ - (_)() + (#_)() * (-#(not _))) do  end;if (((-#_))() <= #(not _) % ((-#_))._ or (-#(not _)) and #_ == (#(not _))._ + ((-#(not _)))._ == #_) then  end;for _ = (not _) / (((not _))._)() < ((-(not _)))() / (-_) / ((not _))() and ((not _))() + ((-#(not _)))() >= (_)(), (#(not {((-(not _)))._;(not _);}))() or (#(not _))._ and ((not _))() + ((_)._)() + ((-(not _)))._ * _ > (((-#(not _)))._)() % ((-_))._, (#(not _))._ ^ ((-(not _)))() == (not _) * ((-#_))._ / ((not _))() or (#(not _))() == ((_)._)() < _ do  end; end;if ((#_)() < (((-(not _)))._)() % ((-#(not _)))._ + ((-(not (function(_, _, _, _, _, _, _, ...)return ((not _))(), (_)(); end))))() < ((not _))._ or ((-(not _)))._ <= ((-#_))() / (-#_) and ((not _))._ % ((-_))._) then for _ = (-#_) + ((-(not _)))() * ((not _))() + (((not _))._)() and (-#_) / (#(not _))() or (#_)._ >= ((-#(not _)))._, (((not _))._)() and (((-#(not _)))._)() == (not _) % (((-#_))._)() == (((-#_))._)() <= ((-#_))._ or (-#(not _)) ^ ((-#(not _)))._, ((-#(not _)))() <= ((_)._)() or #(not _) and ((-(not _)))._ or ((-#_))._ >= (_)() < (#_)._ or (-(not _)) do  end;local _ = ((#(not (function(_, ...)return _, #(not _), (#(not _))._, ((-(not _)))._; end)))._)();while (((-#(not _)))() < ((#(not _))._)() + (#(not _))() ^ (_)() > ((-#_))._ == ((not _))._ and (-#(not _)) >= (-#(not _))) do  end;while (#_ % (-#((-#(not _)))() > ((not _))() / (#(not _))._ and ((not _))()) % #(not _) <= (_)() + (((not _))._)() ^ ((-(not _)))() % ((-#_))._ >= ((-(not _)))._) do  end;local _ = _;if ((_)._ ^ #(not ((not _))._ <= (_)._ + (_)._ >= (-#(not _))) % ((#(not _))._)() % (#_)() > ((-#(not _)))() == ((_)._)() < _ == ((-(not _)))()) then  end;if (((-_))._ % (-_) * ((-#_))() - ((-#_))() == (#_)() >= (((-#(not _)))._)() * (#_)._ or (((-#(not _)))._)()) then  end;if ((_)() % ((#_)._)() <= (((-#(not _)))._)() - _ <= ((-_))() % (-#(not _)) ^ (not _) + ((_)._)()) then  end; end;if ((#(((-(not _)))._)() / (((-_))._)() ^ ((-_))() or ((-_))() ^ ((-_))() < (_)._)._ - #(not ((-(not _)))._ and (#_)._ + (((not _))._)() + (((-#(not _)))._)() == (#(not _))() > ((-#(not _)))._) + ((-#{(#_)._;[((-#(not _)))] = (-_);[((-#(not _)))] = ((not _))._;}))._ or (((not _))._)() > (((-_))._)() and ((-#(not _)))._ and #(not _) * ((-#(not _)))._ + ((-#(not _)))() <= (#(not _))()) then for _ = (((-_))._)() > ((not _))() * (((-_))._)() % (((-(not _)))._)() < (((not _))._)() % (#(not _))() == (#(not _))() < (((-#(not _)))._)(), (not (function(_, _, _, _, _, _, ...)return (_)(), ((-_))(), (#(not _))(), (-(not _)), (((-(not _)))._)(); end)) and ((-#(not (function(_, _, _, ...)return ((-(not _)))._, #_; end))))() % (((-#(not _)))._)() <= ((-(not _)))._ % ((not _))() >= (-#_) >= (#_)() or ((-#(not _)))._, (((-#(not _)))._)() > #(not _) == (#_)._ <= #_ * (#_)._ / ((-#(not _)))._ - ((-(not _)))() ^ ((_)._)() do  end;if ((not (_)._ and (_)() or ((-#(not _)))._ + ((-_))._) and ((-_))() < ((-#_))._ + (((-_))._)() < ((-(not _)))() / ((-#(not _)))._ and (#_)._ >= (_)()) then  end;while (((-#(not _)))._ + (_)() < (((-_))._)() ^ ((-#(not _)))._ <= (#(not _))() <= ((not _))._ < (#_)._ >= (((-_))._)()) do  end;local function _(...)  end;local _ = (#(not _))._; end;for _ = #(not _) > ((not _))._ >= (#(not _))() * ((-(not _)))._ <= ((not _))._ <= (_)._ - (((-_))._)() >= ((-_))() ^ (-_) / (-(not _)), (#(not _))() > ((-(not _)))() * ((-#(not _)))() / (((not _))._)() or ((-_))._ <= ((#_)._)() ^ (#_)._ <= ((not _))() ^ (((not _))._)() / (((-(not _)))._)(), (((-#(not (function(_, _, _, _, ...)return ((-_))(), (((-(not _)))._)(), #_, #(not _), ((-#(not _)))._, (#(not _))(), (#(not _))(), ((#_)._)(); end))))._)() % (((-((not _))() ^ ((-_))() - (#(not _))._ or (-_) > (((-#(not _)))._)() or ((_)._)()))._)() % (-(not #(not _) >= (not _) == _ ^ (_)())) == ((-(function(_, _, _, _, _, _, _, _, ...)return #(not _), (-#_), ((#(not _))._)(), (#(not _))._, (-_), (not _), (#_)(), (#(not _))._, (((-#_))._)(); end)))() > (-(not _)) * (not _) == ((-#_))() * (((-#_))._)() - (((-#(not _)))._)() * #_ do if (#_ + (-(not (function(_, _, _, _, _, _, _, ...)return ((-#_))._, (#(not _))(), (-#_); end))) == ((_)._)() == ((-_))() < ((-_))._ % (-_) or (-#(not _)) * (-_)) then  end;while ((_)() <= (-((-#_))._ % ((-#_))._ > ((-#(not _)))() % ((not _))()) * ((-_))() == (((not _))._)() ^ _ == (_)() > ((-_))._ >= _) do  end;if (_ > ((not _))() > ((not _))() or _ / ((#(not _))._)() - ((-(not _)))() + (-#_) / (((-#_))._)()) then  end;local function _(...)  end;if (((-(not _)))() < (_)._ * (((not _))._)() or (-#_) and _ <= ((#(not _))._)() + (#(not _))() > ((#_)._)()) then  end;if (((#(not _))._)() <= ((_)._)() / ((not _))._ + ((-#(not _)))._ or (((not _))._)() - ((#_)._)() and (_)() * (_)._) then  end;for _ = ((-(not (((not _))._)() ^ ((-_))._ < (-_) or ((#_)._)())))._ >= (-(not _)) % ((-#_))() and (((-#(not _)))._)() == (-(not _)) and ((#(not _))._)() < _ + (((-#_))._)(), (#(not _))._ >= (#_)._ or ((-(not _)))() >= ((#_)._)() >= (#_)._ or (-#_) >= (#_)() <= ((-(not _)))(), (((not _))._)() or (#(not (function(_, _, _, _, _, _, _, _, _, ...)return (not _), ((-#(not _)))(), ((#_)._)(), (#_)._, (((-(not _)))._)(), _; end)))._ - ((-#_))._ + (((-(not _)))._)() * (-#(not _)) == (((-_))._)() and (((-#_))._)() * ((-#_))._ do  end;if (((-#(not _)))._ - ((#(function(_, _, _, _, ...)return #(not _), ((#(not _))._)(), ((-#(not _)))._, ((#_)._)(), (((not _))._)(), ((#_)._)(), #(not _), ((_)._)(); end))._)() == ((_)._)() - ((-#_))() or (-#_) * _ + ((-_))._ == ((-(not _)))()) then  end; end;local _ = (-{(-_);#_;((#_)._)();(#(not ((#(not _))._)() - (((-#(not _)))._)() / (((-#_))._)() - (#_)._))();((not _))._;(((-#(not _)))._)();});local function _(...) local function _(...)  end;if ((-#(not _)) + (not _) % (((-(not _)))._)() - ((-_))() or (-#_) / ((-#_))._ - ((-#_))._ > (-#(not _))) then  end;local _ = (-#_);local _ = ((function(_, ...)return (#(not _))(), (_)._, ((-#_))._, ((#(not _))._)(), (((not _))._)(), ((not _))._; end))._;for _ = ((-(not _)))() + (((-#(not _)))._)() < _ / ((-#_))() or ((-_))() - #(not _) + ((_)._)() % (_)(), ((_)._)() > #(not _) / ((-#(not _)))() ^ ((-_))._ ^ ((-(not _)))() or #_ % _ * ((-_))(), ((-#(function(_, _, _, _, _, _, _, ...)return (((-(not _)))._)(), (((not _))._)(), ((#_)._)(), ((-#_))(), ((-#_))(), (-_), (-_), ((not _))(), _; end)))() == ((-#(not {})))._ or (#(not _))._ >= ((-#_))._ > (_)() > (((-_))._)() and (-#(not _)) / ((_)._)() do  end;while ((#(not _))._ - ((-(not _)))._ >= ((-_))() or ((-(not _)))._ < (((not _))._)() and (-#_) ^ (((-_))._)() == (((-#_))._)()) do  end;local _ = (-(not _)); end;local function _(...) local function _(...)  end;local _ = ((_)._)();if (_ <= (#(not ((-#_))._ / #(not _) + (((-#_))._)() == _))() <= (not _) - (_)._ == (((not _))._)() > (not _) / (-#_) or ((-#_))()) then  end;while ((((-#_))._)() and (_)._ ^ #_ - ((not _))._ * (-#_) < ((-_))._ + #_ > _) do  end;local function _(...)  end;while (((-#(not _)))._ * ((not (function(_, _, _, _, ...)return (((-(not _)))._)(), (#_)(), (#_)(), (-(not _)), (-_); end)))() + (((-#(not _)))._)() * _ > ((-(not _)))() == ((-(not _)))._ <= (((not _))._)() ^ (#(not _))._) do  end;if ((#(not _))() and ((-_))._ + (#_)._ ^ ((-#(not _)))._ + ((-(not _)))() > (#_)._ / (-(not _)) or (-(not _))) then  end;while ((((-_))._)() < (#(not _))._ > ((#_)._)() > (-#(not _)) % ((-#(not _)))._ / (((-#(not _)))._)() / (((-#_))._)() or ((#_)._)()) do  end; end;if (((not _))._ ^ (((-#(function(_, _, _, _, _, ...)return ((-#_))._; end)))._)() >= ((not _))() or ((#_)._)() ^ (-#(not _)) == #_ >= (((-(not _)))._)() > (#(not _))() < ((not _))() < (((-(not _)))._)()) then if ((-(not _)) - (#_)() or (#(not _))() - #_ + ((#_)._)() == (#_)._ + (((-#_))._)() < _) then  end;local _ = ((-_))();if ((((not _))._)() <= (#(not _))._ / (-(not _)) <= ((not _))() > (((-#_))._)() >= (((-(not _)))._)() % ((-(not _)))() / (((-_))._)()) then  end;local function _(...)  end;for _ = ((-(not _)))() + ((-_))() <= #(not _) >= (((not _))._)() - ((-_))() + ((-_))._ - ((#_)._)() ^ (#_)._, ((#_)._)() and (((-#{((-#(not _)))();[(#_)] = ((-(not _)))._;}))._)() and (#_)() % ((-#_))() and (((-_))._)() - (((-#_))._)() or (not _) < ((#(not _))._)(), ((-#(not _)))() <= ((_)._)() - (((-(not _)))._)() or _ + (((-_))._)() % (((-(not _)))._)() + ((-#_))() == ((-#_))._ do  end;while (((-#(not _)))._ ^ ((-#_))._ == (-_) > ((-#_))._ and (-_) < ((-#(not _)))() or ((_)._)() - (((-_))._)()) do  end; end; end;  end; end;   local F = (#TEXT + V165); local G, Dictionary = ({}), ({}); for H = V0, F - V1 do local Value = Character(H); G[H] = Value; Dictionary[H] = Value; Dictionary[Value] = H; end; local ByteString, Position = (function(ByteString) local X, Y, Z = Byte(ByteString, V1, V3); if ((X + Y + Z) ~= V248) then PrimaryXORKey = PrimaryXORKey + V62; F = F + V200; end; ByteString = SubString(ByteString, V5);  local C, D, E = (""), (""), ({}); local I = V1; local function K() local L = ToNumber(SubString(ByteString, I, I), V36); I = I + V1; local M = ToNumber(SubString(ByteString, I, I + L - V1), V36); I = I + L; return (M); end; C = Dictionary[K()]; E[V1] = C; while (I < #ByteString) do local N = K(); if G[N] then D = G[N]; else D = C .. SubString(C, V1, V1); end; G[F] = C .. SubString(D, V1, V1); E[#E + V1], C, F = D, D, F + V1; end; return (Concatenate(E)); end)("PSU|"), (#TEXT - V90);local function CalculateVM(Index, Value, ...)if (Index == 185710584) then return ((BitXOR(BitXOR(Value, 667522), 90992)) - 903608);elseif (Index == 138873896) then return (((BitXOR((Value) - 299630, 996258)) - 101068) - 182883);elseif (Index == 839582851) then return ((BitXOR(BitXOR(((Value) - 829286) - 469707, 247136), 900558)) - 694041);elseif (Index == 675734030) then return ((((Value) - 130105) - 961000) - 973251);elseif (Index == 193725673) then return ((BitXOR(((Value) - 533374) - 416050, 118055)) - 732755);elseif (Index == 473049668) then return (BitXOR((BitXOR(Value, 297663)) - 14954, 73592));elseif (Index == 432941687) then return ((BitXOR((Value) - 265204, 483375)) - 566439);elseif (Index == 781925415) then return (BitXOR(BitXOR(BitXOR((BitXOR(Value, 603496)) - 318256, 331172), 820419), 468585));elseif (Index == 422170658) then return ((BitXOR(BitXOR((BitXOR(Value, 615120)) - 458367, 611542), 8672)) - 281235);elseif (Index == 856070367) then return ((BitXOR(BitXOR(((Value) - 556434) - 352256, 949884), 850638)) - 779834);elseif (Index == 902231187) then return ((((Value) - 542428) - 831411) - 112024);elseif (Index == 453547184) then return ((BitXOR(((Value) - 739496) - 43425, 935738)) - 997543);else end; end;local V0 = T['sscHv'];  local V3 = T[((409312754 - #("string here......>.")))];  local V1 = T['atZEXj'];  local V4 = T[(0x1FF873DB)];  local V2 = T['yzFd0jL'];  local V256 = T[(292683086)];  local V16777216 = T['ibQvXYtCz'];  local V65536 = T[(0x152DEABE)];      local function gBits32() local W, X, Y, Z = Byte(ByteString, Position, Position + V3); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % V256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % V256; Y = BitXOR(Y, PrimaryXORKey); PrimaryXORKey = Y % V256; Z = BitXOR(Z, PrimaryXORKey); PrimaryXORKey = Z % V256; Position = Position + V4; return ((Z * V16777216) + (Y * V65536) + (X * V256) + W); end; local function gBits16() local W, X = Byte(ByteString, Position, Position + V2); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % V256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % V256; Position = Position + V2; return ((X * V256) + W); end; local function gBits8() local F = BitXOR(Byte(ByteString, Position, Position), PrimaryXORKey); PrimaryXORKey = F % V256; Position = (Position + V1); return (F); end; local function gBit(Bit, Start, End) if (End) then local R = (Bit / V2 ^ (Start - V1)) % V2 ^ ((End - V1) - (Start - V1) + V1); return (R - (R % V1)); else local P = V2 ^ (Start - V1); return (((Bit % (P + P) >= P) and (V1)) or(V0)); end; end;  local Mode = ""..T["bYiVNkcX"]; local function _R(...) return ({...}), Select(Mode, ...); end;local function Deserialize(...) local V7 = T[(377448429)];  local V986462 = T[(720386246)];  local V5000 = T[(540250878)];  local V2 = T["yzFd0jL"];  local V3 = T[(0x18659DDF)];  local V1023 = T[((416871398 - #("string here......>.")))];  local V256 = T[(0x1171FD4E)];  local V35 = T["d373pH0Z"];  local V661578 = T.wWs0rswd;  local V31 = T.VLG8AzX;  local V2047 = T["eosQv"];  local V52 = T[(0x294D037E)];  local V5 = T.IOJJvHnJE;  local V6 = T["rA08Cfz"];  local V996906 = T[(428904133)];  local V104210 = T[((#{764;(function(...)return 204;end)()} + 39396746))];  local V32 = T[((595498577 - #("string here......>.")))];  local V1 = T['atZEXj'];  local V4 = T[(0x1FF873DB)];  local V20 = T[((299820988 - #("string here......>.")))];  local V8 = T[(879678962)];  local V910349 = T[((#{(function(...)return ;end)()} + 439610612))];  local V0 = T["sscHv"];  local V21 = T["rA5MTkFp"];  local V904820 = T[(594404626)];     do local function _(...) if ((-_) > (not _) or (-#{(#(not _))();((-#_))._;[(_)] = (_)();(#(not _))._;}) - ((_)._)() == ((-(not _)))() - ((-(not _)))() / ((not _))() % ((not _))._ >= (#(not _))() and (#_)._ ^ ((-_))() == (((-#_))._)()) then local function _(...) while ((#_)._ < (((-(not _)))._)() - (_)() <= #(not _) < (#(not _))._ ^ (-(not _)) < ((-_))._ + ((not _))._) do  end;local function _(...)  end;if ((#_)() <= ((_)._)() * (#_)() or (#_)._ ^ ((-#_))() ^ (#(not _))._ % ((not _))._ ^ #_) then  end;while ((((not {[((-#_))] = ((_)._)();[(#_)] = (((not _))._)();_;[((-#_))] = ((-#_))._;}))._)() - (((-#(not {[((_)._)] = ((#_)._)();[(((not _))._)] = ((-#_))();[((((-(not _)))._)())] = (((not _))._)();})))._)() % (((-_))._)() - ((-#_))._ / ((-(not _)))() - (_)() == (-#(not _)) * ((not _))._) do  end;while ((((-(((-(not _)))._)() or ((-#_))._ > ((not _))() ^ (((not _))._)()))._)() >= ((-#_))._ < ((_)._)() and (((not _))._)() / (#(not _))._ ^ #(not _) == ((-#(not _)))._ ^ (-_)) do  end;local _ = (((-#_))._)();for _ = (_)() and (#_)() == (_)._ == ((#_)._)() / _ % ((not _))._ ^ ((-(not _)))() < #_, ((-(not _)))._ <= ((#_)._)() % ((#(not _))._)() + #(not _) == (((-_))._)() * ((-(not _)))._ + ((-_))._ and (((-(not _)))._)(), (((-#(function(_, _, _, _, _, ...)return #(not _), (-_), (not _), (((-_))._)(); end)))._)() * (#_)._ == ((-(not _)))() > (#(not _))() ^ ((-(not _)))() % (((-(not _)))._)() >= ((#_)._)() ^ ((not _))._ do  end; end;while ((-(not _)) > (-#_) <= (((not _))._)() % (((-#_))._)() > (_)() - (((-#_))._)() > (_)() / ((-_))._ ^ (not _) >= (((-#(not _)))._)()) do local _ = (((not {(((-#(not _)))._)();[((((-#(not _)))._)())] = ((#_)._)();(#_)();[(((-#(not _)))())] = #(not _);}))._)();for _ = ((_)._)() > (((-#_))._)() or ((not _))() and ((#(not _))._)() >= (not _) + ((-_))() + (#(not _))() ^ ((#(not _))._)(), (-_) >= (-#(not _)) - (_)() * (#(not _))() - _ <= ((-_))() % ((-#(not _)))() == ((-#(not _)))._, (((-#{((-#_))._;[((-_))] = _;((-#(not _)))._;(-(not _));[((#_)._)] = #_;}))._)() >= ((-(not _)))._ > (-#(not _)) <= ((#(not _))._)() and (#(not _))._ % (not _) >= ((-#(not _)))._ / ((-#_))._ do  end;while (#_ == (((-#(not _)))._)() * (-#(not _)) / ((#(not _))._)() + (not _) == (#(not _))() / (((-#_))._)() / (-(not _))) do  end;local _ = ((-#{[(((_)._)())] = (-_);[((#(not _))())] = (-_);(_)._;}))();if ((((-(not (function(...)return ((-#_))._, #(not _); end))))._)() >= ((not _))._ % ((not _))() + #(not _) / #(not _) - ((-_))() / ((-#_))() <= (((-#(not _)))._)()) then  end;for _ = ((#_)._)() <= (-_) + ((_)._)() / (((-(not _)))._)() / (#_)() * ((-_))() ^ ((_)._)() or ((-#(not _)))(), ((-#(not _)))._ or ((-#_))() < (#_)() % (((-#_))._)() ^ (((-_))._)() - ((-#(not _)))() - (_)._ == (-#_), ((-(not _)))._ ^ ((-#_))() <= (-#(not _)) * ((-#_))() <= ((not _))._ <= (_)._ < ((#(not _))._)() / ((-_))() do  end;local _ = #_; end;if (#(not _) + ((-#(not _)))() >= _ or #(not (function(_, _, _, _, _, ...)return (((not _))._)(), (-_), ((-(not _)))(), (_)._; end)) % ((-_))() % ((not _))() ^ ((_)._)() <= (((-#_))._)() or (_)._ * ((_)._)()) then local _ = (#_)._;local function _(...)  end;while (((#_)._)() == ((-#_))() ^ ((-(not _)))._ * (_)._ or (#_)._ == (#(not _))._ / (_)._ <= ((-_))._) do  end;if (({[(((_)._)())] = (_)();[(((-_))._)] = ((-_))();(((-_))._)();[((-#_))] = ((not _))();((_)._)();((#(not _))._)();[((-_))] = (#(not _))._;})._ % ((-#(not _)))() < (#_)._ / (_)._ and (((not _))._)() or ((#_)._)() % (-#_) <= (#_)()) then  end;while ((((-#(not {(not _);(_)._;[(((-_))())] = #(not _);[((#(not _))._)] = ((_)._)();#(not _);((-_))();})))._)() / (((-{[(((-#(not _)))())] = ((-#_))._;(_)();[(((#_)._)())] = ((-(not _)))._;}))._)() >= (-#_) > ((-#(not _)))._ and (((-#(not _)))._)() and ((#(not _))._)() or (((-(not _)))._)() >= #_) do  end;local _ = (((-#(not _)))._)();for _ = ((-(not _)))() - (#_)._ * #_ or ((not _))._ >= ((-#_))._ - ((_)._)() == (#(not _))._ % (((-#_))._)(), ((function(_, _, _, _, _, _, _, ...)return ((-(not _)))(); end))() and (-#(not _)) ^ (not _) * ((-_))() - (_)() > (#_)() * (#(not _))._ and (((-_))._)(), (not (function(_, _, ...)return (#(not _))(), (((-#(not _)))._)(), (_)._, (not _), (not _), (((-#_))._)(), (#_)(); end)) == ((_)._)() - ((_)._)() + (#(not _))() ^ ((#(not _))._)() > (_)() or (_)() or ((-_))() do  end; end;if ((#_)._ and (-#((-_))._ or (-#_) * (((-_))._)() == ((-_))() - (-#_) - (#_)._) >= ((not _))() or (((-(function(_, _, _, _, _, _, _, _, ...)return #(not _); end)))._)() ^ _ > (_)() - ((-_))() < (((-#_))._)() % ((-(not _)))() % (((-#(not _)))._)()) then for _ = ((-#(not _)))() or (((-#(not _)))._)() == (((not _))._)() * #(not _) + ((not _))._ < (-#(not _)) <= ((-(not _)))() * (#(not _))._, (((-#_))._)() > ((-(not _)))() <= ((-#(not _)))() > ((-#(not _)))._ <= ((#_)._)() >= ((#_)._)() * (#(not _))._ ^ ((not _))(), #(not _) ^ #(not _) / ((-_))() or ((-#(not _)))._ * (((-_))._)() < #(not _) and #_ >= ((-#(not _)))._ do  end;for _ = (((-#(not ((-_))() - (-_) <= (_)._ % ((#_)._)())))._)() - (#{(#_)._;[((#(not _))._)] = ((#_)._)();[((-#_))] = ((#_)._)();})._ - (not _) + ((-_))._ == ((-#_))() > (((not _))._)() <= ((-_))._ / #(not _), (#(not _))() >= (-#(not (function(_, _, _, _, _, _, ...)return ; end))) ^ #_ and (#(not _))._ * ((-(not _)))() >= (not _) % (#(not _))() > ((-#(not _)))._, _ / (#_)() * ((-_))() < (((-(not _)))._)() - ((-(not _)))() / (((not _))._)() / #(not _) <= ((-#(not _)))._ do  end;if ((#_)._ > (#_)._ < ((-_))() and ((-#(not _)))() or (-#(not _)) >= (((-(not _)))._)() - #_ > ((not _))._) then  end;local _ = ((-#(function(_, _, _, _, _, ...)return _, (((-#_))._)(), (((-(not _)))._)(), (#_)._; end)))._;for _ = (#_)() * {[(((-#_))._)] = (#_)();[((((not _))._)())] = _;} - ((-_))._ and (((-#(not _)))._)() / ((-_))._ - (#(not _))._ >= ((-(not _)))() + (#(not _))(), (-{((not _))._;[(((not _))())] = ((-#_))._;}) == _ >= (_)._ > (-(not _)) ^ (_)._ or (((not _))._)() ^ (-#_) == (#_)._, ((-#(not (not _) ^ ((-#_))() + ((not _))() >= ((-#_))._)))._ - ((-#(function(_, _, _, _, _, _, _, ...)return (#(not _))._, ((not _))(), #(not _), (_)._; end)))() / ((not _))() / (((-#(not _)))._)() - (((-#(not _)))._)() - (-#_) * ((-#(not _)))._ - #_ do  end; end;local function _(...) local _ = ((#(not _))._)();local _ = #_;while ((-#(not {(((-#_))._)();[((not _))] = (((-(not _)))._)();((-(not _)))();[(((-#_))._)] = (-(not _));})) <= (((-#_))._)() % (-#_) < ((-#_))._ ^ (_)() >= ((_)._)() or (#(not _))() * (#(not _))()) do  end;local function _(...)  end;local _ = _;if ((#_)._ == (_)._ + ((-#(not _)))() ^ (-_) * (((-(not _)))._)() and #(not _) / (-(not _)) ^ (_)._) then  end;local function _(...)  end; end;local _ = ((function(_, _, _, _, _, _, _, _, _, ...)return (((-_))._)(), (((-#(not _)))._)(), (#_)._, ((#(function(_, ...)return ((_)._)(), (#(not _))(), (-(not _)), ((-#(not _)))._; end))._)(), (#(not _) - (((-_))._)() ^ _ < ((-#(not _)))())(), (((not _))() % ((not _))() or (-(not _)) ^ (((not _))._)())._, ((#{((-#(not _)))();})._)(), (#_)._, (-(function(_, _, _, _, _, _, _, _, ...)return ((-#(not _)))(), ((not _))(), ((not _))(), (((-_))._)(), (#_)._; end)); end))(); end;  end; end;     local function Deserialize(...)  	local Functions = ({}); 	local Constants = ({}); 	local Instructions = ({});  			 	local StackSize = gBits16(PrimaryXORKey);  	for Index = V0, gBits32(PrimaryXORKey) - V1, V1 do Functions[Index] = Deserialize(); end;   							for Index = V0, gBits32(PrimaryXORKey) - V1, V1 do 								local Type = gBits8(PrimaryXORKey);  								if (Type == V20) then  									local Bool = gBits8(PrimaryXORKey); 									Constants[Index] = (Bool ~= V0);  								elseif (Type == V35) then 									while (true) do 										local Length = gBits32(PrimaryXORKey); 										Constants[Index] = SubString(ByteString, Position, Position + Length - V1); 										Position = Position + Length;  										break; 									end; elseif (Type == V2) then  									while (true) do 										local Left = gBits32(PrimaryXORKey); 										local Right = gBits32(PrimaryXORKey); 										local IsNormal = V1; 										local Mantissa = (gBit(Right, V1, V20) * (V2 ^ V32)) + Left; 										local Exponent = gBit(Right, V21, V31); 										local Sign = ((-V1) ^ gBit(Right, V32)); 										if (Exponent == V0) then 											if (Mantissa == V0) then 												Constants[Index] = (Sign * V0); 												break; 											else 												Exponent = V1; 												IsNormal = V0; 											end; 										elseif(Exponent == V2047) then 											Constants[Index] = (Mantissa == V0) and (Sign * (V1 / V0)) or (Sign * (V0 / V0)); 											break; 										end; 										Constants[Index] = LDExp(Sign, Exponent - V1023) * (IsNormal + (Mantissa / (V2 ^ V52))); 										break; 									end; elseif (Type == V7) then  									while (true) do 										local Length = gBits32(PrimaryXORKey); 										if (Length == V0) then Constants[Index] = (''); break; end;  										if (Length > V5000) then 											local Constant, ByteString = (''), (SubString(ByteString, Position, Position + Length - V1)); 											Position = Position + Length; 											for Index = V1, #ByteString, V1 do local Byte = BitXOR(Byte(SubString(ByteString, Index, Index)), PrimaryXORKey); PrimaryXORKey = Byte % V256; Constant = Constant .. Dictionary[Byte]; end; 											Constants[Index] = Constant; 										else 											local Constant, Bytes = (''), ({Byte(ByteString, Position, Position + Length - V1)}); 											Position = Position + Length; 											for Index, Byte in Pairs(Bytes) do local Byte = BitXOR(Byte, PrimaryXORKey); PrimaryXORKey = Byte % V256; Constant = Constant .. Dictionary[Byte]; end; 											Constants[Index] = Constant; 										end;  										break; 									end; 								else                                     Constants[Index] = nil 								end; 							end;  							local Count = gBits32(PrimaryXORKey); 							for Index = V0, Count - V1, V1 do Instructions[Index] = ({}); end;  							for Index = V0, Count - V1, V1 do 								local InstructionData = gBits8(PrimaryXORKey); 								if (InstructionData ~= V0) then 									InstructionData = InstructionData - V1; 									local E, A, Enum, C, D, B = V0, V0, V0, V0, V0, V0; 									local InstructionType = gBit(InstructionData, V1, V3);  							if (InstructionType == V2) then  B = Instructions[(gBits32(PrimaryXORKey))]; Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); elseif (InstructionType == V1) then  B = (gBits32(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); elseif (InstructionType == V0) then  B = (gBits16(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); elseif (InstructionType == V6) then  elseif (InstructionType == V5) then  B = (gBits32(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); D = ({}); for Index = V1, C, V1 do D[Index] = ({[V0] = gBits8(PrimaryXORKey), [V1] = gBits16(PrimaryXORKey)}); end;  elseif (InstructionType == V3) then  B = Instructions[(gBits32(PrimaryXORKey))]; C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); end;  							if (gBit(InstructionData, V4, V4) == V1) then A = Constants[A]; end; if (gBit(InstructionData, V6, V6) == V1) then C = Constants[C]; end; if (gBit(InstructionData, V5, V5) == V1) then B = Constants[B]; end; if (gBit(InstructionData, V8, V8) == V1) then E = Instructions[gBits32(PrimaryXORKey)]; else E = Instructions[Index + V1]; end;  							if (gBit(InstructionData, V7, V7) == V1) then D = ({}); for Index = V1, gBits8(), V1 do D[Index] = gBits32(); end; end;  							local Instruction = Instructions[Index];  							Instruction[V910349] = Enum; Instruction['WA1or7y4'] = D; Instruction[-V996906] = E; Instruction["MklM"] = A; Instruction["RhUb15"] = B; Instruction[V904820] = C; end; end; 	local ParameterCount = gBits8(PrimaryXORKey);   	return ({ 	[V661578] = Constants; 	['pNMd6'] = Instructions; 	['EV2Stn'] = V0; 	[-968917.2633757299] = Functions; 	[-V986462] = StackSize; 	[-V104210] = ParameterCount; 	});  end;    return (Deserialize(...)); end;   do local function _(...) for _ = ((-_))() and ((-#((-#(not _)))._ * (#(function(_, _, _, _, _, _, _, ...)return ((-#_))(), ((-(not _)))._, (((-_))._)(), (_)._, (((-(not _)))._)(), ((-#_))(), ((-#_))._, ((-_))._; end))._ and (_)._ == #(not _) < ((-#_))._ >= ((not _))() + ((-#_))._ - _))() == (#(not (function(_, _, ...)return ((_)._)(), (((-_))._)(), ((_)._)(), (((-(not _)))._)(), (-#(not _)), ((#(not _))._)(); end)))() < (not _) <= ((-#_))() < (((-#(not _)))._)() < ((-#_))() * (#_)._ + #(not _) or (#_)._ < (((not _))._)() == ((_)._)(), #(not _) or _ % ((#{(#_)._;})._)() == (((-#(not _)))._)() - (((-(not (((-(not _)))._)() / (-#_) <= ((#(not _))._)() <= ((-(not _)))())))._)() < (-#_) / (_)() and (-_) <= (((-(not _)))._)() * (not _) - ((-(not _)))() > (_)(), ((-#_))() or (-(not _)) == (-#{}) % (-_) / (((-_))._)() < (((not (function(_, _, _, _, _, _, ...)return ((-(not _)))(), (((-(not _)))._)(); end)))._)() / ((-(not _)))() < ((-(not _)))._ and (-#(not _)) and (-#_) > (not _) <= ((-#_))() do if (((-_))._ and ((-#(function(_, _, _, ...)return ((-#(not _)))(), ((#_)._)(), ((-(not _)))._, ((-(not _)))(), (#_)(), ((-#_))._, (#_)._, ((-#_))._, (((-#_))._)(); end)))() > (#_)() < (((-#(not _)))._)() + (_)._ * ((-(not _)))._ < ((-(not _)))() + ((_)._)() ^ ((#(not _))._)() ^ (#_)()) then while (_ < (#_)() or (_)._ or (((-#_))._)() / (((not _))._)() and (((not _))._)() / (#_)() > (_)._) do  end;for _ = ((-#_))() == (#(not _))._ * (((-(not _)))._)() and ((-#(not _)))() / _ > ((-_))._ ^ #(not _) < (_)(), ((-#(not (-#(not _)) <= (((-#(not _)))._)() % (#(not _))._ > (((-#(not _)))._)())))._ < (_)._ - ((#_)._)() or ((-(not _)))._ ^ ((not _))() == (((-#(not _)))._)() * ((#_)._)() and (((-#_))._)(), (-#(not _)) + ((not (function(_, _, _, _, _, ...)return (_)._, (_)._, ((not _))(), (#(not _))._, ((-#(not _)))(); end)))._ ^ ((#_)._)() * ((-#(not _)))() / (((-#_))._)() % ((not _))() ^ ((#(not _))._)() ^ (-#_) do  end;local function _(...)  end;local _ = (#_)._;while ((-_) < (((-#(not {[((-#_))] = ((-(not _)))._;})))._)() < ((not _))._ - (-_) or (((-#_))._)() and ((#(not _))._)() > ((-(not _)))._ - (-(not _))) do  end;while ((((not _))._)() == ((-_))() * ((not _))() ^ (_)._ ^ (-#_) and (_)() and ((_)._)() ^ (-(not _))) do  end;local _ = (_)(); end;local _ = (#(not _))();local function _(...) while (((not _))._ and (-#_) >= ((-(not _)))._ - (#_)._ - (_)() == (((-#_))._)() > #_ and #(not _)) do  end;local function _(...)  end;local _ = #(function(...)return (#_)._, ((not _))._, ((#_)._)(), (((-#_))._)(); end);for _ = (((not _))._)() and (not _) + _ and ((_)._)() % #(not _) <= (((-_))._)() or #_ ^ ((_)._)(), _ * ((not _))._ % ((-_))() == ((-(not _)))._ and #(not _) or ((-_))() > (#_)._ > ((-#_))._, ((_)._)() + (not _) < ((_)._)() or (#_)() > ((-#(not _)))._ == (((-#_))._)() ^ (((-#(not _)))._)() ^ (((-_))._)() do  end;for _ = (((not _))._)() >= ((#(not _))._)() <= #(not _) or (-#(not _)) % ((-#(not _)))._ % ((-#_))() / ((-#_))() < (#(not _))(), (_)() < ((-_))() and (#(not _))._ - (-#_) - ((-#_))._ % (_)._ >= (((-#_))._)() < #(not _), ((-#_))._ - ((-##(not _) and ((-(not _)))._ and ((-#(not _)))() < ((_)._)()))._ > (((-#_))._)() + (-_) - (#_)() ^ ((-_))._ + (-(not _)) > (#_)._ do  end;local _ = #(not {[(((-_))._)] = (not _);[(((-#_))())] = (not _);});for _ = ((not _))() - (#(not _))._ - (-#_) + #_ + (((-_))._)() % ((-#(not _)))() <= (_)._ == (((-(not _)))._)(), ((not _))() <= (#(not _))._ or ((-#_))() % ((-_))._ > (((-#(not _)))._)() or ((#(not _))._)() % (#(not _))() > ((not _))._, ((#(not _))._)() and (((not _))._)() - ((_)._)() or (#_)() ^ ((-(not _)))() or ((-#_))() or ((_)._)() == (((not _))._)() do  end;for _ = ((-{}))() + (((-#_))._)() % (-_) * (((-_))._)() * ((#(not _))._)() <= ((#(not _))._)() + _ <= #(not _), (((-#(not (function(_, _, _, _, _, _, _, ...)return (((-#_))._)(), (#(not _))(), ((-_))._; end))))._)() + (((-#(function(...)return (((not _))._)(), ((-_))(); end)))._)() + (((not _))._)() - ((#(not _))._)() and ((not _))() / (not _) / (((-#(not _)))._)() and ((not _))(), (-#(not _ and ((-_))() or ((-(not _)))._ > (_)())) % (((not (((-_))._)() / (((not _))._)() % _ > #(not _)))._)() / (((-#_))._)() == (not _) + ((-(not _)))._ + (-(not _)) + (-_) * ((-#_))._ do  end; end;local function _(...) while ((#_)._ == (-(not _)) > #_ < ((-#(not _)))._ or ((not _))._ * (((-#(not _)))._)() + ((-(not _)))() < (((-#_))._)()) do  end;for _ = ((-#_))() <= (#(not (function(_, _, _, _, ...)return (((-#_))._)(); end)))._ <= (#(not _))() - #(not _) or #(not _) or ((_)._)() * ((-#(not _)))._ % ((-#_))._, (#_)._ < (-#(not _)) - (-#_) * ((-#_))._ + (((-_))._)() * (((-#_))._)() % ((-(not _)))._ == (((-#_))._)(), (((-#(not _)))._)() * (((-#{(#(not _))();(_)._;[((-#_))] = (((not _))._)();}))._)() and (((not _))._)() == ((-#(not _)))._ >= (((-_))._)() and ((#(not _))._)() == (-#(not _)) / ((not _))._ do  end;local function _(...)  end;while (#_ ^ (((-(not _)))._)() and ((-(not _)))() ^ ((_)._)() <= ((not _))._ >= ((-#(not _)))() + (((-_))._)() > (_)._) do  end;local _ = ((-#(not _)))();for _ = ((-#_))() - (-#(not _)) ^ #_ * ((-#(not _)))._ >= ((-#(not _)))() >= (_)._ - (((-#(not _)))._)() % (((-#_))._)(), (((-#(not (function(_, _, _, _, _, _, ...)return (_)._, ((not _))(), (_)._, (((-#(not _)))._)(), (-#_); end))))._)() ^ #(not _) and #(not _) and (((-(not _)))._)() <= (((-(not _)))._)() == (-#(not _)) / (-#_) <= ((not _))._, ((#_)._)() >= ((-#(not _)))._ * (#(not _))._ / ((not _))._ or (-#(not _)) ^ ((-#(not _)))() == ((not _))() + ((-(not _)))() do  end;for _ = ((-(not _)))._ % ((#(not _))._)() + (((-#_))._)() and (-#(not _)) - (_)() and ((-_))() - ((-#(not _)))._ and ((#_)._)(), ((-#_))._ > _ - _ - (((-#_))._)() == _ % ((#(not _))._)() * ((#_)._)() > ((-(not _)))(), ((-_))() >= (((-(not _)))._)() * (-#_) + (#_)() + (not _) + ((-#_))._ and ((-#_))() * (((not _))._)() do  end; end;for _ = (((-(not _)))._)() * (-#_) >= ((-#_))._ / (-(not _)) <= (((-(not _)))._)() == (#_)() and (-#_) <= (((not _))._)() <= ((#(not _))._)() % (#(not _))(), _ ^ ((function(_, _, _, _, ...)return ((-(not _)))(), (-_), (((not _))._)(), (((not _))._)(), #(not _), (((not _))._)(), #_, (((-#(not _)))._)(), (-#_); end))._ * ((#(((not _))._)() <= ((-(not _)))() / ((not _))._ <= (#(not _))._)._)() or ((-_))._ or (-_) > ((not _))._ <= ((_)._)() == #(not _) < ((not _))._ - ((#_)._)(), ((-(not _)))() == _ >= ((-#(_)._ and ((-#(not _)))._ < ((-#_))() or (#_)()))._ > ((function(_, _, _, _, _, _, _, _, _, ...)return (-_), (-#(not _)), ((-(not _)))._, ((-#_))(), (-#(not _)), ((not _))(), (((-#(not _)))._)(); end))() / (#(not _))() < (-#(not _)) and ((-(not _)))._ - (((not _))._)() == (-#(not _)) and (-_) do local _ = (((-_))._)();for _ = ((not _))._ <= (not _) == (-#_) + (-_) or (#_)._ > (#_)._ <= (_)._ == (-#_), #(not _) < (#(not _))() and _ or (-#(not _)) * _ or (#_)() - ((#(not _))._)() or ((-#_))(), (((not {}))._)() >= (_)() > (((-(not _)))._)() ^ ((-#(not _)))() and ((-#(not _)))() + (-#_) and ((-#_))._ % _ do  end;while (_ < ((-(function(_, _, _, _, _, _, ...)return ((-#_))._, ((-(not _)))._, ((#_)._)(), (-_), ((-#(not _)))(), (((not _))._)(); end)))._ == _ and (-#(not _)) <= #_ >= ((-(not _)))._ + (((-#_))._)() / ((-#(not _)))._) do  end;if (((-_))() <= (-(not _)) + #(not _) == (_)._ - (-#(not _)) / #_ - (#(not _))._ > (#(not _))._) then  end;while ((#(not (function(_, _, _, _, _, _, ...)return (not _), (#_)(); end)))._ and (#_)() % ((-#_))() == (((-(not _)))._)() >= ((#(not _))._)() == ((_)._)() - (#(not _))._ == (#(not _))()) do  end;for _ = ((#(not (function(_, ...)return ((-_))._; end)))._)() and (-((#_)._)() or ((-#(not _)))._ - #_ + #(not _)) % (#(not _))._ + #(not _) + ((_)._)() <= ((not _))() <= ((#_)._)() and ((not _))._, (((-#(not {[((#_)._)] = ((-#(not _)))._;[((#_)())] = (((-(not _)))._)();})))._)() <= (((-(not _)))._)() and (#_)._ < (((not _))._)() < (#(not _))() == (#(not _))() % ((-_))() % ((not _))._, (((-(not (function(_, _, ...)return ; end))))._)() * (#_)._ * (-#_) / ((_)._)() and ((-_))() * (#(not _))() and (#_)() - ((not _))() do  end;if ((#_)() < ((not {((-(not _)))._;#(not _);(-#_);}))() and (_)._ + (-#_) >= ((-#(not _)))() < (_)() <= ((-_))() and (((-_))._)()) then  end;if (((-(not _)))._ >= (((-_))._)() <= ((_)._)() or (not _) >= (((-#_))._)() < ((not _))() >= ((-#(not _)))._ > (-#(not _))) then  end; end;if (#(not _) % ((#_)._)() <= (#_)._ * ((#(not _))._)() % ((#(not _))._)() + ((-(not _)))._ / (_)() - (#_)._ * (((-#(not _)))._)() * #_) then local function _(...)  end;while (((-(function(_, _, _, _, ...)return (-_), (-(not _)), (((-_))._)(), #_, (_)(), (#_)._, (_)(); end)))() <= (((-(not _)))._)() - (((-_))._)() ^ ((-(not _)))._ < ((not _))() - ((-(not _)))._ - ((-(not _)))() <= (((-#(not _)))._)()) do  end;if ((((-_))._)() - ((#_)._)() == #(not _) > (_)._ * ((-#(not _)))() + ((-#(not _)))._ % ((-(not _)))._ == (not _)) then  end;local function _(...)  end;while (((#_)._)() == ((#_)._)() < (#(not _))._ <= (-(not _)) >= ((#(not _))._)() + #(not _) == (_)._ ^ ((not _))()) do  end;local _ = (-#_);for _ = (#(not _))._ == ((#_)._)() < ((#(not _))._)() < (((-#_))._)() > ((-#(not _)))() / ((-(not _)))() >= ((-_))._ % ((not _))(), (-#((-(not _)))._ % ((_)._)() == ((not _))._ + (((not _))._)()) ^ (#(not _))._ and (((-(not _)))._)() / ((-(not _)))._ <= (((-#(not _)))._)() * (((-#_))._)() >= (-_) / ((not _))._, (#(not _))() < ((-(not _)))() >= ((not _))() or (-#_) <= _ > ((not _))._ and _ - (not _) do  end;local function _(...)  end; end;local _ = ((-(not (function(_, _, _, _, _, ...)return (_)(), (#(not _))(), ((-_))._, (((-#(not _)))._)() ^ (#(not _))() - ((-_))._ > ((-#_))(), (#(not _))._, #_, (_)._, (((-_))._)(); end))))(); end;  end; end;   local function Wrap(Chunk, UpValues, Environment, ...)  		local InitialInstructionPoint = 0; 	local StackSize = Chunk[-986462]; 	local Constants = Chunk[661578]; 	local ParameterCount = Chunk[-104210]; 	local Functions = Chunk[-968917.2633757299]; 	local Instructions = Chunk['pNMd6'];  	return (function(...)  				local OP_E = -996906; 		local VarArg = {}; 		local PCount = (Select(Mode, ...) - 1); 		local DecryptConstants = (true); 		local OP_A = "MklM"; 		local OP_B = 'RhUb15'; 		local OP_C = 904820; 		local OP_D = "WA1or7y4"; 		local Stack = {}; 		local Top = -(1); 		local Arguments = {...}; 		local OP_ENUM = 910349; 		local lUpValues = ({}); 		local InstructionPoint = Instructions[InitialInstructionPoint]; 		local VMKey = (731884424);  		for Index = 0, PCount, 1 do 			if (Index >= ParameterCount) then 				VarArg[Index - ParameterCount] = Arguments[Index + 1]; 			else 				Stack[Index] = Arguments[Index + 1]; 			end; 		end;  		local VarArgs = PCount - ParameterCount + 1;  		while (true) do 			local Instruction = InstructionPoint; 			local Enum = Instruction[OP_ENUM]; 			InstructionPoint = Instruction[OP_E];if (Enum <= 39) then if (Enum <= 19) then if (Enum <= 9) then if (Enum <= 4) then if (Enum <= 1) then if (Enum > 0) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 1) then  Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Constants[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Constants[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 2) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum == 3) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 4) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 6) then if (Enum > 5) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 6) then  Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]];end;elseif (Enum <= 7) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum == 8) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 9) then local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A]()); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; for I = Top + 1, StackSize do Stack[I] = nil; end;end;elseif (Enum <= 14) then if (Enum <= 11) then if (Enum == 10) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 11) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 12) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 13) then Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 14) then  local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;end;elseif (Enum <= 16) then if (Enum == 15) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 16) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 17) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum == 18) then elseif (Enum <= 19) then Stack[Instruction[OP_A]] = Create(Instruction[OP_B]);end;elseif (Enum <= 29) then if (Enum <= 24) then if (Enum <= 21) then if (Enum > 20) then local A = Instruction[OP_A]; local Step = Stack[A + 2]; local Index = Stack[A] + Step; Stack[A] = Index; if (Step > 0) then if (Index <= Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end; elseif (Index >= Stack[A+1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end;elseif (Enum < 21) then  local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A]()); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; for I = Top + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Constants[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Constants[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 22) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Constants[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Constants[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum == 23) then Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Constants[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Constants[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 24) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]];end;elseif (Enum <= 26) then if (Enum > 25) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 26) then  Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Constants[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Constants[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 27) then local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end;elseif (Enum > 28) then InstructionPoint = Instruction[OP_B];elseif (Enum < 29) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]];end;elseif (Enum <= 34) then if (Enum <= 31) then if (Enum == 30) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local Results, Limit = _R(Stack[A](UnPack(Stack, A + 1, Instruction[OP_B]))); Top = Limit + A - 1; local K = 0; for I = A, Top do K = K + 1; Stack[I] = Results[K]; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](); Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 31) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 32) then local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum > 33) then local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 34) then  Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Constants[Instruction[OP_C]];end;elseif (Enum <= 36) then if (Enum == 35) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 36) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 37) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 38) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 39) then  local Function = Functions[Instruction[OP_B]]; local fUpValues = Instruction[OP_D]; local Indexes = {}; local nUpValues = SetMetaTable({}, { __index = function(_, Key) local UpValue = Indexes[Key]; return (UpValue[1][UpValue[2]]); end, __newindex = function(_, Key, Value) local UpValue = Indexes[Key]; UpValue[1][UpValue[2]] = Value; end; }); for Index = 1, Instruction[OP_C], 1 do local UpValue = fUpValues[Index]; if (UpValue[0] == 0) then Indexes[Index - 1] = ({ Stack, UpValue[1] }); else Indexes[Index - 1] = ({ UpValues, UpValue[1] }); end; lUpValues[#lUpValues + 1] = Indexes; end; Stack[Instruction[OP_A]] = Wrap(Function, nUpValues, Environment);end;elseif (Enum <= 59) then if (Enum <= 49) then if (Enum <= 44) then if (Enum <= 41) then if (Enum > 40) then Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]];elseif (Enum < 41) then  local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result;end;elseif (Enum <= 42) then local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end;elseif (Enum > 43) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 44) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]];end;elseif (Enum <= 46) then if (Enum == 45) then local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end;elseif (Enum <= 46) then Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 47) then local A = Instruction[OP_A]; local B = Instruction[OP_B]; local Offset = 50 * (Instruction[OP_C] - 1); local T = Stack[A]; local Count = 0; for Index = A + 1, B do T[Offset + Count + 1] = Stack[A + (Index - A)]; Count = Count + 1; end;elseif (Enum == 48) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 49) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 54) then if (Enum <= 51) then if (Enum > 50) then Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]];elseif (Enum < 51) then  Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 52) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum == 53) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 54) then Stack[Instruction[OP_A]] = Create(Instruction[OP_B]); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 56) then if (Enum > 55) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 56) then  local A = Instruction[OP_A]; do return UnPack(Stack, A, Top); end;end;elseif (Enum <= 57) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 58) then Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 59) then  Stack[Instruction[OP_A]] = Wrap(Functions[Instruction[OP_B]], (nil), Environment);end;elseif (Enum <= 69) then if (Enum <= 64) then if (Enum <= 61) then if (Enum == 60) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 61) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 62) then local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum == 63) then local A = Instruction[OP_A]; Stack[A] = Stack[A]();elseif (Enum <= 64) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 66) then if (Enum > 65) then Stack[Instruction[OP_A]] = Create(256);elseif (Enum < 66) then  Stack[Instruction[OP_A]] = UpValues[Instruction[OP_B]];end;elseif (Enum <= 67) then local A = Instruction[OP_A]; Top = A + VarArgs - 1; for Index = 0, VarArgs do Stack[A + Index] = VarArg[Index]; end; for I = Top + 1, StackSize do Stack[I] = nil; end;elseif (Enum > 68) then local A = Instruction[OP_A]; Stack[A] = 0 + (Stack[A]); Stack[A + 1] = 0 + (Stack[A + 1]); Stack[A + 2] = 0 + (Stack[A + 2]); local Index = Stack[A]; local Step = Stack[A + 2]; if (Step > 0) then if (Index > Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end; elseif (Index < Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end;elseif (Enum < 69) then  Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]];end;elseif (Enum <= 74) then if (Enum <= 71) then if (Enum == 70) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 71) then local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Top)); for I = A + 1, Top do Stack[I] = nil; end;end;elseif (Enum <= 72) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 73) then local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 74) then  local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Constants[Instruction[OP_C]]];end;elseif (Enum <= 76) then if (Enum > 75) then Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 76) then  Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 77) then Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Constants[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 78) then do return; end;elseif (Enum < 79) then  Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;  					end; 				end); 			end;  			 do local function _(...) if (((not _))() or (-_) < (-(not (#(not _))() - _ % ((-(not _)))() or (-_) and (((-_))._)() == _)) * ((not _))() == #(not {}) * ((-(not _)))() ^ (_)() <= ((-(not _)))._ > ((_)._)() >= ((-(not _)))() <= #(not _) % (#(not _))()) then for _ = (-(not _)) and ((-#_))() * (-(not {[((#(not _))._)] = #(not _);})) * (((-#(not (function(_, _, _, _, _, _, _, _, ...)return (((-(not _)))._)(), ((_)._)(), ((-(not _)))._; end))))._)() * ((-#_))._ ^ ((-(not _)))() and (_)() + ((-#_))._ or ((-_))() * ((-#(not _)))._, ((-#_))._ ^ ((_)._)() + (_)._ <= (((not (((-#(not _)))._)() > ((-#_))() + (#_)() - ((-_))()))._)() or (not _) and ((#_)._)() + (((not _))._)() or (((-#_))._)() <= (((-(not _)))._)() and ((#(not _))._)(), ((#(_)._ or (#_)._ or ((-_))._ ^ (_)._ <= (#(not _))._ * _)._)() / (#(not _))._ >= (#(#_)() + ((not _))._ >= (_)._ % _)() / ((-(not _)))._ >= (((-(not _)))._)() / ((-(not _)))._ % ((#(not _))._)() - ((-#(not _)))._ <= (_)._ <= (-(not _)) do local _ = (#((#_)._)() + (#_)._ < (-_) > ((_)._)() > (((-#_))._)() * ((not _))())();if ((#_)() > ((-#(-#_) - (((-(not _)))._)() - ((_)._)() + ((not _))()))._ * ((_)._)() > ((-_))() - ((-(not _)))() - (((-#(not _)))._)() % (-#(not _)) > ((-_))._) then  end;local _ = _;while (#(not (function(_, _, _, _, _, _, _, _, _, ...)return ((not _))(), (((-#_))._)(), (_)._, (((not _))._)(), (((-(not _)))._)(), ((-#_))(), (not _), (-_), ((-_))(); end)) >= ((-_))._ >= (((-_))._)() or ((not _))() ^ ((-_))() > ((-_))._ / ((-#_))() == ((-#_))._) do  end;local _ = (-_);for _ = (((not _))._)() + (#_)._ or (((-_))._)() + (#_)() % ((-(not _)))() > (-_) - (-(not _)) ^ (((-#(not _)))._)(), ((not _))() == ((-#(not _)))._ % ((not _))() % (-_) <= ((-#(not _)))._ or _ ^ (((not _))._)() / ((-#_))(), ((#(not _))._)() and (not _) < (((not _))._)() > (-(not _)) % (#(not _))._ ^ ((-(not _)))._ >= ((-_))() and ((_)._)() do  end;while (((-#(not _)))() >= ((-#(not _)))() and (-#_) * (((not _))._)() % (((-#(not _)))._)() % (#(not _))._ ^ ((-#_))() > (_)._) do  end; end;while ((-(not _)) <= (((-#{[((#_)())] = ((-#(not _)))._;[(((-#(not _)))._)] = (-#(not _));((-_))._;}))._)() and (#(not _))() >= (#(not _))._ > (#(not _))() <= ((-_))() >= (-#(not _)) > ((_)._)() or (((-#_))._)() ^ ((_)._)()) do for _ = ((-(not _)))._ * ((-_))._ <= (-#_) > (((-#(not _)))._)() * ((not _))._ / ((not _))() or ((#_)._)() ^ ((-_))(), ((-#(not _)))._ ^ (#(not ((-#_))._ - ((#(not _))._)() or ((-#_))._ and (-#_)))() < #(not _) >= (((-#_))._)() ^ ((-_))() + (((-(not _)))._)() >= (-#_) <= ((-#(not _)))._, ((-(#_)() * ((-#(not _)))() - ((-#_))() > ((not _))()))() - #(#_)() ^ (-#_) ^ ((_)._)() ^ _ * (-_) == #(not _) - ((not _))() ^ ((-#_))() >= (((-#_))._)() / (((-_))._)() do  end;for _ = #(not _) or (-(function(_, _, _, _, _, _, _, _, ...)return ((-#(not _)))(); end)) ^ ((not _))() % (-#(not _)) % _ % (((not _))._)() < (((-_))._)() <= ((#_)._)(), (#(not _))._ + ((#_)._)() > ((#(not _))._)() ^ _ % (_)._ <= (not _) < (-_) and (#(not _))(), ((-{[((((-(not _)))._)())] = ((-_))();((-#_))();}))() ^ (#(not _))._ ^ ((_)._)() % (((-(not _)))._)() ^ (-#_) * ((-#_))() == (-#(not _)) or ((_)._)() do  end;for _ = ((-#_))._ + ((-{((#(not _))._)();}))() == ((-(not _)))() ^ _ > (-_) % #_ + #(not _) or ((#(not _))._)(), (((-#_))._)() ^ ((-#(not {})))() - ((-(not _)))._ % (not _) and (((-#(not _)))._)() - (#(not _))() + ((-#(not _)))() or (#(not _))._, _ * {} / ((-#_))._ * (((-(not _)))._)() >= (((-#_))._)() <= ((not _))._ < ((#(not _))._)() ^ _ do  end;for _ = ((-#(not _)))._ < #(not (function(_, _, _, _, _, _, _, ...)return (-#_), (-_), (((-#(not _)))._)(), ((not _))._, ((-#(not _)))(), (-#(not _)), (_)._, (-#(not _)); end)) + ((-_))._ >= (-#(not _)) >= ((-#_))._ + #_ < ((-#(not _)))._ ^ (((-#_))._)(), (not _) == _ and ((-(not _)))._ and (((-_))._)() > ((-#_))() <= (((not _))._)() or ((not _))() * (-_), ((-((-_))() % (#_)._ or ((-#_))() % (#_)()))._ + #_ % (#(not _))() <= #(not _) * ((_)._)() > (((-#_))._)() or ((_)._)() <= (((-#(not _)))._)() do  end;local _ = (((-_))._)(); end;for _ = (((-(not _)))._)() * (#(not _))._ + ((-_))() < ((#_)._)() and ((-#(not _)))() + ((-#_))._ * ((#(not _))._)() - ((-_))() > (-_) < _, (((not {((-#(not _)))();[(((-_))())] = (-_);}))._)() % (#_)() < (not _) + ((-#(#(not _))._ + (_)() % _ <= _))() - (not _) + (-_) ^ (_)._ == #_ * (((-_))._)() <= (-#(not _)), ((-#(not _)))() or (not _) or (-#(not _)) / ((#{[(((-_))())] = (#_)();})._)() <= ((-#_))._ <= (((-_))._)() + ((-(not _)))() + ((not _))._ <= (-(not _)) < (((not _))._)() do local _ = (_)();for _ = ((_)._)() / ((#(not _))._)() ^ (((-#(not _)))._)() > ((-#(not _)))() >= #(not _) > (#(not _))._ > (((not _))._)() % (((-#(not _)))._)(), ((not {[((-_))] = ((not _))();[((#(not _))())] = ((-#_))._;[((#_)._)] = (#(not _))._;}))._ <= (((-_))._)() - ((#_)._)() ^ #_ >= ((-_))._ < ((-#(not _)))() ^ (-(not _)) / ((-#(not _)))(), (#(not _))._ <= (-#_) or (((-#(not _)))._)() >= ((not _))() and ((-(not _)))._ ^ ((-(not _)))._ ^ ((-_))._ >= (((-#(not _)))._)() do  end;for _ = (-#(not _)) * ((not _))() >= (#_)() == (#(not _))() * (((-(not _)))._)() and ((not _))._ or ((not _))() >= (((-#_))._)(), (-#(not ((-_))._ * (-_) or ((#(not _))._)() or (((-#(not _)))._)())) * ((-(not {[((#_)._)] = (((-#(not _)))._)();[(((_)._)())] = ((#_)._)();[((-_))] = (-_);[((((-_))._)())] = (-#(not _));((-_))._;(((not _))._)();})))._ >= (not _) <= (not _) + ((_)._)() + ((-_))() + (((-(not _)))._)() or ((-#_))(), ((-#{[((((-(not _)))._)())] = ((-(not _)))._;[((_)._)] = (_)();}))._ > ((#(not _))._)() <= (#(not _))() * (((-_))._)() / (not _) < (((not _))._)() * ((-_))._ == (not _) do  end;local function _(...)  end;local function _(...)  end;local _ = (#_)(); end;local function _(...) local _ = (((-_))._)();local function _(...)  end;local _ = ((not _))._;while ((((-#_))._)() % ((-(not (function(_, _, _, ...)return ((not _))(), ((not _))(), (#_)._, ((not _))._, #_, (-_), (#_)._; end))))._ % ((-#(not _)))._ * (((-#_))._)() > ((-_))._ % (#(not _))._ <= ((-_))() >= (-(not _))) do  end;if ((#_)() % ((-(not (-(not _)) * (-#(not _)) or (((not _))._)() * (-_))))() >= _ < (_)() < (_)() < (((-(not _)))._)() + (((-(not _)))._)() / ((-(not _)))()) then  end;if (((-(not _)))._ > ((-#(not (function(_, ...)return ((-(not _)))._, ((-#_))._, ((#_)._)(), ((-#(not _)))._, (((not _))._)(), (((-#(not _)))._)(), ((-#(not _)))._; end))))._ and (#(not _))() > ((-(not _)))._ + (((-#_))._)() <= (not _) < ((#(not _))._)() or ((#(not _))._)()) then  end;local _ = ((#(not _))._)();while (((-(not _)))() + (_)._ * (#_)._ <= (((-#_))._)() % (#(not _))() + (#_)() and (#_)() >= ((-#_))()) do  end; end;local _ = (-(function(_, _, ...)return (_)(), ((#{[((-_))] = (_)();})._)(), (#_)(), (((-((-_))() * (-#_) < ((-(not _)))() * (((not _))._)()))._)(), #_; end));local function _(...) local _ = ((-(not _)))();if (#(not _) > (not _) and (-(not _)) * ((#(not _))._)() ^ ((-#_))() < (-#(not _)) / ((-_))._ / (-#(not _))) then  end;local function _(...)  end;if (((-#(not _)))() - ((-(not _)))() - ((#_)._)() - ((-_))() == (-#(not _)) - ((-#(not _)))._ > ((#(not _))._)() + #(not _)) then  end;if ((((-_))._)() and ((-_))._ % ((-(not _)))() + (-_) + ((#_)._)() * ((#_)._)() and ((-(not _)))._ == ((_)._)()) then  end;if (((-#_))() >= ((-_))._ <= (((not _))._)() * (-#_) - ((_)._)() < (-_) + ((-#_))._ > (((-(not _)))._)()) then  end;local function _(...)  end;local _ = ((not _))._; end;if (#(not _) >= ((-#_))() / (#_)._ / (((not _))._)() <= ((-_))() / ((not _))() ^ (-#_) % ((-_))() + (((-(not _)))._)() - ((#(not _))._)()) then if ((not {(-_);[(((#_)._)())] = ((-#_))();(#(not _))();[((((not _))._)())] = ((_)._)();}) % (#_)() + ((-#(not _)))._ / (((not _))._)() >= ((-#_))() + _ or ((-(not _)))._ % ((-(not _)))._) then  end;local function _(...)  end;while (((-#_))._ % (#(not (not _) or (((not _))._)() / (#_)._ ^ ((-(not _)))()))._ * ((-(not _)))() / ((#(not _))._)() ^ #(not _) >= (-#(not _)) <= (-_) > (-(not _))) do  end;local function _(...)  end;for _ = ((not _))._ >= (((-#(function(_, ...)return (not _), ((not _))._, #_, (-#_), ((-(not _)))._, ((-(not _)))(), (-(not _)), (#(not _))._; end)))._)() == (#(not _))._ + ((-(not _)))() and ((#_)._)() ^ (#(not _))._ == ((-#_))() * (not _), ({[(((not _))())] = (_)._;((-#(not _)))();((-(not _)))();[((-#_))] = (((-#_))._)();((-#(not _)))();})._ % (#_)() / ((-_))() % (_)._ / ((-#(not _)))._ <= (((not _))._)() <= (#(not _))() and ((-(not _)))(), (-#(not _)) <= (((-#_))._)() - (-(not _)) and ((-_))() > ((-#(not _)))._ / ((#_)._)() * (not _) and (-_) do  end;while (({(((-#_))._)();(((-(not _)))._)();[((#_)())] = ((-(not _)))();})() % ((-#(not _)))() + _ <= ((_)._)() == ((-#_))._ ^ (((not _))._)() ^ (-_) > ((-#(not _)))._) do  end;for _ = (((-(not _)))._)() or (#(not _))() or ((not _))() < (((-_))._)() == (#(not _))() - #_ < #_ > ((-_))(), (((not (function(_, ...)return ((-#(not _)))._, (((-#_))._)(), ((-#(not _)))(), (_)(), ((-(not _)))(), (not _), ((_)._)(), (_)._, ((-#(not _)))(); end)))._)() + ((#_)._)() - ((-#_))._ + ((-_))() == (_)() + ((-_))() - (#_)._ + (#(not _))._, _ and ((-#(not _)))() and (-#(not _)) < _ ^ (-(not _)) ^ ((#_)._)() > ((not _))() / (#(not _))() do  end; end;local _ = (-#(not (#(not _))() ^ ((#(not _))._)() - (_)() + (((-#_))._)() % (-(not _)) * #(not _) + (-#_) - ((not _))._ and (((-#_))._)() ^ ((-#_))() > (-#_)));if (((-{[((#_)())] = (#(not _))._;(-#_);[((-_))] = ((-#(not _)))._;}))() or (-#(not {(((-(not _)))._)();[((_)._)] = (-(not _));[((_)())] = ((not _))._;})) <= ((-#_))._ ^ ((-#(not _)))() * (((-(not _)))._)() % ((not _))._ >= (#(not _))._ * (((-#(not _)))._)() / ((not _))._ * (_)()) then local _ = ((#_)._)();while ((#_)() - (-#(not {((-#_))();(#(not _))();[(((#_)._)())] = ((-#(not _)))._;})) < (#(not _))._ and ((not _))() / (not _) + ((not _))._ + (#_)() >= (((-(not _)))._)()) do  end;if ((-#(not (function(_, ...)return #_, ((not _))(); end))) + ((-_))._ < _ > (#(not _))() and ((#(not _))._)() and (#_)() < (not _) - (_)._) then  end;if (((not ((-#(not _)))() or (-#_) == ((-#_))() > ((-#(not _)))()))() <= ((-#(not _)))() <= (((-(not _)))._)() > (((-#(not _)))._)() % ((-_))() > ((-(not _)))() / (#_)._ <= #(not _)) then  end;local _ = (-#(not _));for _ = ((-#(not _)))() > (not _) >= ((-_))() >= (((-#_))._)() * (-(not _)) / (((-_))._)() or (_)() / (_)(), (#(not _))._ - ((-(not _)))() / (((-#_))._)() >= (((-(not _)))._)() <= ((-(not _)))() < ((-(not _)))._ * ((-_))() <= (-#(not _)), (#_)() > (#{[((#(not _))())] = (((-#(not _)))._)();})() >= ((-(not _)))() / (-(not _)) == (((-_))._)() or _ / (-#(not _)) <= (not _) do  end;local function _(...)  end; end; end;  end; end;   			return Wrap(Deserialize(), {}, GetFEnv())(...);  end)(({['r8RVv2066Y']=(((#{950;0x073;396;549;(function(...)return ;end)()} + 244)));["ye44k5AVT"]=("\115");rZnWjAt0Mq=("\51");[(88796037)]=("\103");[(0x2C8C0504)]=("\102");['c0ydBldk']=("\116");FGtkHaj=("\98");[((#{0x154;912;(function(...)return 844,0x26A,0x309,0x209;end)()} + 299820963))]=((20));["VLG8AzX"]=((0x01F));[(0x68B6E33)]=((934523528));[(0x27F57468)]=((0x03E));["GE0QmuXenr"]=("\107");[((#{13;37;0x186;0x1BE;} + 439610608))]=((910349));[(879678962)]=(((#{780;0x26F;(function(...)return 0x2C7,856,...;end)(0x07E,0x02D)} + 0x002)));[((355330769 - #("string here......>.")))]=((65536));['d373pH0Z']=(((54 - #("string here......>."))));[(536376283)]=(((23 - #("string here......>."))));Fb7HRrszO=("\114");[((919223013 - #("string here......>.")))]=("\100");['IOJJvHnJE']=(((#{108;0x36E;0x018;0x2F7;} + 0x001)));[(0x285CD7AF)]=("\111");J2RN0=("\119");["yzFd0jL"]=((0x002));[((#{264;(function(...)return 614,951;end)()} + 0x1E944E1D))]=("\110");["V4jX6"]=("\118");[(619816894)]=("\112");[((#{0x3AE;(function(...)return 0x13C,32,0x007,0x071;end)()} + 983342817))]=((0x024));[((#{721;(function(...)return 0x3B1,170,...;end)(0x37E,862,766)} + 199698886))]=(((919223013 - #("string here......>."))));MUZkvsP=((0x05A));[(0x37C30C4C)]=("\105");[((#{(function(...)return 186,0x1A2;end)()} + 0x712AF03))]=(((#{882;0x083;(function(...)return 0x3E5,0x088,132,...;end)(0x091)} + 88796031)));[(0x38AA9F3A)]=((0x37C30C4C));[((#{(function(...)return 0x2C9,821;end)()} + 595498556))]=((32));['rA08Cfz']=(((#{974;} + 5)));[((594404645 - #("string here......>.")))]=(((904839 - #("string here......>."))));[(0x18659DDF)]=(((#{499;0x00A;225;810;} - 0x001)));bNtYOiU=("\121");['lGUzA3o8']=("\109");[(0x259258C)]=((0x19712));['eosQv']=((2047));['ibQvXYtCz']=((0x1000000));[((#{417;348;0x135;} + 0x19908EC2))]=(((#{0x2CB;} + 0xF3629)));["Ar0nC"]=("\120");['M4548t9d']=((0x0A5));bYiVNkcX=("\35");sscHv=((0));[((864230036 - #("string here......>.")))]=(((#{0x004;0x346;(function(...)return 0x23F,660,...;end)(47,706,0x359)} + 565351138)));[((#{285;0x086;696;0x1C3;(function(...)return 550;end)()} + 0xC143F19))]=((745742125));["wWs0rswd"]=(((#{0x3AB;0x2DD;(function(...)return 685,668;end)()} + 661574)));['atZEXj']=(((#{(function(...)return ;end)()} + 0x001)));[(0x2D07DE65)]=(((#{711;0x07C;} + 747373826)));[((#{270;} + 0x1D7EDB54))]=((0x0CA));[(292683086)]=(((#{969;677;489;} + 253)));[(0x203392FE)]=(((#{(function(...)return 0x04D;end)()} + 0x1387)));["rA5MTkFp"]=(((40 - #("string here......>."))));[(416871379)]=((0x3FF));[((#{730;179;0x18D;0x1B4;(function(...)return ;end)()} + 443530682))]=(((#{793;0x069;0x18C;} + 0xC614F69)));[(377448429)]=((0x007));[(680793454)]=((677173167));[(0x165A45CF)]=(((513035827 - #("string here......>."))));[(908791633)]=((0x372EF0D2));[((565351164 - #("string here......>.")))]=("\97");["ZRyaElIJdG"]=("\99");[(310017476)]=((200));[(701896362)]=((0x31DC6BFE));[(0x2AF038C6)]=((0xF0D5E));[(0x2C731F2D)]=("\101");[((#{0x03C;369;0x133;348;} + 0x372EF0CE))]=("\108");[((692913041 - #("string here......>.")))]=(((#{} + 52)));[((934523547 - #("string here......>.")))]=("\50");[(255862561)]=(((619816913 - #("string here......>."))));[(207703916)]=("\117");[(836529150)]=("\104");}), ...);

return (function(T, ...) local PSU_CHECKMARK = 'This file was obfuscated using PSU Obfuscator 4.0.A | discord.gg / 2XDXd2Hmzq'; local V322338081 = T["TnxkG9OGgm"];  local V283039001 = T[((286509975 - #("string here......>.")))];  local V999036285 = T[((522600470 - #("string here......>.")))];  local V5 = T[((#{749;} + 0x8A64A3F))];  local V0 = T[((981534049 - #("string here......>.")))];  local V182 = T["xPr4Ac"];  local V57 = T[((310393360 - #("string here......>.")))];  local V36 = T[((#{0x020;132;878;0x042;(function(...)return ;end)()} + 165789948))];  local V931085288 = T[(559618540)];  local V522735659 = T[((#{0x2DC;178;(function(...)return 0x06E,0x35A,...;end)()} + 463532146))];  local V26 = T[(0x37FAA2D4)];  local V772526533 = T.QUmY70Z;  local V912690581 = T['ubHvtPq1'];  local V165 = T["usciaBecQ6"];  local V90 = T[(557686538)];  local V248 = T[((#{178;906;0x338;0x2E7;(function(...)return 0x342,901,341;end)()} + 621436147))];  local V1 = T[(494803018)];  local V455457869 = T["kJihgZD"];  local V2 = T["iFsQSa"];  local V186411751 = T.NOnfS;  local V103949162 = T["hgwaqt"];  local V57127984 = T[((#{324;0x39A;274;588;} + 0xC9C3FE2))];  local V672095651 = T[(0x22013650)];  local V591529116 = T[(0x1F102030)];  local V411261201 = T[(34166784)];  local V354430662 = T[(953785841)];  local V3 = T["eW5I0V0i0P"];  local V831020351 = T.ZgIh56Mpo;  local V32 = T.D0RxU4yc4f;    local GetFEnv = ((getfenv) or (function(...) return (_ENV); end)); local Storage, _, Environment = ({}), (""), (GetFEnv(V1));  local bit32 = ((Environment[""..T.t0UtO.."\105"..T[V186411751].."\51\50"]) or (Environment[""..T.t0UtO.."\105"..T[V186411751]]) or ({})); local BitXOR = (((bit32) and (bit32[""..T['t0UtO'].."\120"..T.fnHRkOY8.."\114"])) or (function(A, B) local P, C = V1, V0; while ((A > V0) and (B > V0)) do local X, Y = A % V2, B % V2; if X ~= Y then C = C + P; end; A, B, P = (A - X) / V2, (B - Y) / V2, P * V2; end; if A < B then A = B; end; while A > V0 do local X = A % V2; if X > V0 then C = C + P; end; A, P =(A - X) / V2, P * V2; end; return (C); end));  local MOD = (V2 ^ V32); local MODM = (MOD - V1); local BitSHL, BitSHR, BitAND;    local Byte = (_[""..T['t0UtO']..T["C0o1X"]..T[V186411751].."\101"]); local SubString = (_["\115\117"..T.t0UtO]); local GSub = (_["\103"..T[V103949162]..T[V522735659].."\98"]); local Character = (_["\99"..T[V999036285].."\97\114"]);    local RawSet = (Environment[""..T[V912690581].."\97"..T['B6B9le'].."\115\101"..T[V186411751]]); local LDExp = ((Environment["\109"..T["RFHM4HaBw"]..T[V186411751]..T[V999036285]][""..T.zcLUW..T[V354430662]..T[V283039001]..T[V411261201]..T[V831020351]]) or (function(Value, Exponent, ...) return ((Value * V2) ^ Exponent); end)); local SetMetaTable = (Environment["\115\101"..T[V186411751].."\109"..T[V283039001]..T[V186411751].."\97\116"..T['RFHM4HaBw']..T["t0UtO"]..T["zcLUW"].."\101"]); local Select = (Environment["\115\101"..T.zcLUW.."\101\99\116"]); local ToNumber = (Environment["\116\111\110"..T[V522735659]..T[V455457869]..T["t0UtO"]..T[V283039001]..T[V912690581]]); local UnPack = ((Environment["\117"..T[V772526533]..T[V831020351].."\97\99\107"]) or (Environment["\116"..T['RFHM4HaBw']..T['t0UtO']..T['zcLUW'].."\101"][""..T[V522735659].."\110\112\97"..T[V672095651]..T["hPQ0TXsx5O"]])); local Pairs = (Environment["\112\97\105\114"..T[V103949162]]); local Floor = (Environment["\109"..T.RFHM4HaBw..T[V186411751]..T[V999036285]]["\102\108\111"..T["fnHRkOY8"].."\114"]); local Type = (Environment[""..T[V186411751]..T["C0o1X"]..T[V831020351]..T[V283039001]]);    local BitNOT = (bit32[""..T['t0UtO'].."\110"..T['fnHRkOY8']..T[V186411751]]) or (function(A, ...) return (MODM - A); end); local BitOR = (bit32["\98"..T.fnHRkOY8.."\114"]) or (function(A, B, ...) return (MODM - BitAND(MODM - A, MODM - B)); end); BitSHL = ((bit32["\108\115"..T[V999036285].."\105"..T[V591529116].."\116"]) or (function(A, B, ...) if (B < V0) then return (BitSHR(A, -(B))); end; return ((A * V2 ^ B) % V2 ^ V32); end)); BitSHR = ((bit32[""..T[V912690581].."\115"..T[V999036285]..T[V322338081].."\102\116"]) or (function(A, B, ...) if (B < V0) then return (BitSHL(A, -(B))); end; return (Floor(A % V2 ^ V32 / V2 ^ B)); end)); BitAND = (bit32[""..T["t0UtO"]..T['RFHM4HaBw'].."\110"..T[V354430662]]) or (function(A, B, ...) return (((A + B) - BitXOR(A, B)) / V2); end);  if ((not (Environment["\98\105\116\51"..T[V57127984]])) and (not (Environment["\98\105"..T[V186411751]]))) then  bit32["\114\115"..T[V999036285]..T[V322338081]..T[V591529116]..T[V186411751]] = BitSHR; bit32[""..T["t0UtO"]..T['RFHM4HaBw'].."\110"..T[V354430662]] = BitAND; bit32[""..T["zcLUW"].."\115\104\105\102"..T[V186411751]] = BitSHL; bit32[""..T.t0UtO.."\111"..T[V912690581]] = BitOR; bit32[""..T['t0UtO'].."\110\111\116"] = BitNOT; bit32["\98\120"..T.fnHRkOY8..T[V912690581]] = BitXOR;  end;    local Create = (((Environment["\116\97\98\108\101"]["\99\114\101\97\116"..T[V283039001]])) or ((function(Size, ...) return ({ UnPack({}, V0, Size); }); end))); local Insert = (Environment[""..T[V186411751]..T['RFHM4HaBw']..T["t0UtO"].."\108"..T[V283039001]]["\105\110\115\101"..T[V912690581].."\116"]); local Remove = (Environment["\116"..T.RFHM4HaBw.."\98\108"..T[V283039001]][""..T[V912690581].."\101\109"..T['fnHRkOY8'].."\118"..T[V283039001]]); local Concatenate = (Environment["\116"..T["RFHM4HaBw"]..T['t0UtO']..T['zcLUW']..T[V283039001]][""..T[V672095651].."\111"..T[V772526533]..T[V672095651].."\97"..T[V186411751]]);  Environment[""..T.t0UtO..T[V322338081].."\116"..T[V931085288]..T[V57127984]] = bit32;  local PrimaryXORKey = (V26);  local TEXT = string.reverse('u'..'sp/'..'gg'..'.drocsid & /ved.usp.www//:sp'..'tth | A.0.4 rotacsufbO USP gnisu detacsufbo saw elif sihT');  local F = (#TEXT + V165); local G, Dictionary = ({}), ({}); for H = V0, F - V1 do local Value = Character(H); G[H] = Value; Dictionary[H] = Value; Dictionary[Value] = H; end; local ByteString, Position = (function(ByteString) local X, Y, Z = Byte(ByteString, V1, V3); if ((X + Y + Z) ~= V248) then PrimaryXORKey = PrimaryXORKey + V57; F = F + V182; end; ByteString = SubString(ByteString, V5);  local C, D, E = (""), (""), ({}); local I = V1; local function K() local L = ToNumber(SubString(ByteString, I, I), V36); I = I + V1; local M = ToNumber(SubString(ByteString, I, I + L - V1), V36); I = I + L; return (M); end; C = Dictionary[K()]; E[V1] = C; while (I < #ByteString) do local N = K(); if G[N] then D = G[N]; else D = C .. SubString(C, V1, V1); end; G[F] = C .. SubString(D, V1, V1); E[#E + V1], C, F = D, D, F + V1; end; return (Concatenate(E)); end)("PSU|1D1m11101j131g101022d2121m1n21N2131U151121321I1N141v1A162301927B27B26823p21122B1G1327B2321b1I22s1u1D27B22p22A1711161728g111L1t1t1721g1O1B27b2371M161M171N21m21O1228923j1M1527b234121r171q22v27927b21u1z12181c28J1q1r1A21321813131T21T1w27o27B22B21M1J1v27T27v1023k25v1j22b1q27u1021t1Y1N1t1V1N1L1H1123b1V1c29u21O29J1a21J27N27p27r23A28O27B2241z1C28Z21o21o1D1o1S1N22P1r1827b23928T1N2921L1l23629229u21R152aS29t1022a21J161n22v2Au1028R1h2Bq14151b11121l22y1k1727B22e21F2bq1r1t21s21N2A727V22H1P22B2c527B21V217191l102AG23b2B727b22021p1o1c1F28e1D23B2ck2BU27f2ar1623a29B102cV2CX2Cz161d21I21p101r21021d1j1622V141N27b2361g1Q1P1i101M1h1T1d22M2cP1S161217161f2ay1f1f210112Dw1022c21D192CO1v1t162102b11o21q21H1T2AN2d22C61022U1k1T1221r1l152291L1627B2282dL1N1B2992Bt21Z1Y1h21J21711151827F1b23H2Ct102381R1S2E7297192382D321v2182761B2bQ22v2bh2eg2121j181523J2f627b21W1X171g1R1Q22o28829C217171a15131E191W21f1J2Fc22v2FQ29d29F1r1H29f23C2a62cL2Cn1J1j121n1h2B52g62222111D21721923B1t1e27b21Y21b2gP1Y21B1r11172fI2fK1823b28128q2BQ2351P1a27b2EH1t1c21i21j2762hv23h2gm102262171H131O1T1P2122181j1p1E2B52bm2F91l1S23F2gd2Da2151F1a181929Z27V23k2631R2Cj2EW2g01T1n1y21e1S23E1A1p2i82eI2eK2em22C23321m112ET1Q1D1121X23221N28D2Fn22y2fq2fF1A29f2bW1B22Y2hN27b22v122hE1c2g22BQ2em2jV22O2H7102282Ep2B421h2jJ22O2CF1024g25O21822B2fq22821R1s1Q28K161123H2kd1022r1b191f19121g152bq1d1P1g1M22O2d322X1718172ak1223g2KO22a21n1e1f1S21F21H1r1P22R2LB21u21C2B71f21p27E181O21121f2e023g24621f22j22W25623C25626021I2kw2GL21Q2Jd27B22321A1S21m2182c023a2ko22E14112AQ27Q2D72IH2391r1U121T2h32Bq21721K1i2JK2BT2212101C2E52iQ29o29Q1w2fZ2CN2Lg122Ah2d32202192by1d172FX2nR27i27K21N219181F2G4151m29C29E29g29I29k21C2g81F1T131H1j2fb1D1Q22y1S1f2ke2kg161J1M1Q181h2be1L2gs192At28P102aW2ay1D21R21C1H2M71423h2Kw1022z21722B2Bt2i91c1z2111J1H101L2AH2ih2311c1A1e21m214152Cb2PD2gT23a2g621t21e2dx1h2Pr2a021S21I21i22b2g62251Y1Q28T23a2BM2381D2Co2J827v26O25R2182J122p18141f1d1r22v2i62jO2IA21321C28z19112312PS21823022b2Aj27b2Ld1D1618121F171D151V1j23a2D322B2132pb2q42o42Ew2kq2b22B41122O2g622b21n2R21023J2fQ2PY21329W1v2Qi293102342hb2902rU2A821g111R21521329x2141Y101k2sJ2SW2Ns2NU1223A2h427b22N1o22c2bm22D1h2O723I2BM22q289132912Sw22U1a2821t22P2T122c1z2DW1b21p2NC2bl1429u21I141l22V2Ko22s28e2AY2iO152J723624d26M25K25r22r25b26k2182IH21v21I2c62FB1q21J1y1c181n1J2bg2Sw21y21G1J2v623A2Fq2242112M21s28L2Fx2G62eH141C1u22O2FQ2Kf2hE2Dz1S1022O2772P41h2172172l527O1521N21i2Jy2Fc28k1d2342kW25c2411h22B2LB2bo2rz2H31Z21f1r1D2ab2L823H2I2102ls2992Ok2jO2Ej1l2eL1622c22c1r2272342EP1u2oP1a23B2bT22621n1o2S11N2GV2o22QZ2uC1022v162VF2P227B23B2qE1t1h28x1f152dV1d1E2p723B2RH2eG21D2IA21J29n29p29R2d322F21I1J2fU2Oa2382Ko2252182lU2142Vd2XT2p32y92x22x427m27o2ND2SV27b22t2dq28K22P2J12321R2XJ28V22p2kO21U2191B1t21R2152XY2d72BT2Mb27o1A1x21128f1Q1722O2J122r2HE2uF1h2PG2bi2bK162122122FC2hE22P2WW22t1M1322R2Bt2WM2961H2gV2GX2992j12a92ab2s52vG2B81022121328L1L2RD2D72w12pi2821V23422p2T32X822u2t71V22522T2tA2TC2KO22b2PN2DQ1B2152Jj23E2r01t2j523C2j12lS1T27f2dN2j12Vv2bq122fS310R310t1Q1y21J2LM1G23A171k2CL29n10192bQ21h219102152101I172he2v42tB2Lq2ew21X2171f2pE2AH2Fq2Ld2Co172OV1C22s1k26024022y21324R2352712182kO22x1q21828y121B2JY2rp2qP1s1S2MZ2xq2KG2hB1B1o22T2d92Qv2QX1M2132iD2DI1122n2392171O1p23H2KG29u21E1o21g2142Ol1i2e521J21j1K142Lo1722v2J121Z2122V62182Hl2WW22121m21e22a2iH2l32ZS171W2Ua2D72bm2cM2co2rG2i7310S2NT2E5215219132OA2sp310R2VV2CQ2Vq2vS2kO2PY21K315g315I2FQ22U1j2WR2Wt2L92lR313E21p312l2BF2y82vv1q1b142oX28U22v2x02LC2zy2AF2n428s28u28w21l315w2WS2kL23h181r2gE1x315h1K1P1o2fi2Co2132161A312L1821A2CN1l21D2gw2fc2zu2g62382qg2pF2D922r12313h1d21M2v01o1N2s32S32af23A2y82FF1h2Yy2d623a3149313p1H1s11289111B2nI2aC1l1n2de2k5310R2BA311t2R21L23A2t12Qv1b1h1P1921i2pn2pP2gZ310r2Eh2YW2EM22v2wl21J1B1A111n1x21I2q32Vm2tc2fQ2BV1031972KN2a72Yh2O921k1Z2cp2ah2y82Hq1r1n2qR27O2ox2Z62f71021U31402iF2Bt22421L1k21e3195319B2oa1K23e2KW21S28k313O21z21h2oX2el1D22Y2bm2Q82IY2j0319t2O6142sG23F2kO21W2Yi2f7162pE2s72Ew2361N314k1S319N23a310z21t2111b1V1421l2141w312j312l3193318q1p1422V2t122W2c631aO316m315y23H2y82Aw1821g315523a2J12372fV2yL2S831bH142ZU2Bt2zX1J1I1r1r2D5319r2Bt22E21R1r2L81K1D21l27e2b52wW21Y191p21X31By28s1H171r23H2t12371I2v81c17310V310X2Xo2Xv1m181t314o319T22r2Ki1D2c231bK2ak310S2133146141e319p31692b52LB317U21c1x1M1G163190151F2zt312P2Ri2Ib2191N22Z2px2Ya1c317W2nD23I1q1I2d331az314k314M23H25E21W23724c23k26a23P25421I26j25n1922o22924B21m23Z21I24x24m24B23225626H1623l2182DP312A282312d1n22C22p312g22422t31Be2hE22a311b312o2T12Yh31DA21e2zJ21d2fj2FL22123M24v27B22F21t22a22622122621z21m1W21w2331w2322332381w23923722T1w23822W22t31gl31Gn22T23022T2342332362382371w22x22U1w23d2332391W22P23631Gm22X23223722x22s31gM22P1w22Q23922X23022S31hc22v21B22W23323131hb31H323731Ge31h531H723B31hM23031Hj31Gm23831gt31gV31gX31i622S31GN31Ge31GO31GM23A23331HF21A1W21t23223822x31iK21Y22331h823923831GE22t23222P22q31GU31IB23323231gN31gP31Is31iu1W22u31H923131IJ22822b1W21v31ha31HO31gz31iC1w22T23e23e1z21C21D31JQ2152ej2a023K2681W2212kw26823Z21B2a52A7311f2RM21d2192Co31d72ii21B2Vf2y822B2bJ27R318p2Rm23A316D21t1C31Hu31Fn1N31Fp2tA21Z31142t42T629x22S2KW24G25d1x313o22V182LE313h112z1102uJ28v1I2382WW22a21F1O318c29C2zF1t21q21q2Zg22U2PS22k313N2J121v152ys1831bX31Dd1H2Le141R23g2VO2u6102fo2g622U2S21v1m2D827A2YV2jq1621L2yP1721B21f27o23631LV2V52V72V92BM21Y21511299317z2bv3182318431862NJ1V3189318b31lv2YD2nY317z313w28t313z2IE314223621b2BK1823c2bm22c21n102Tw2BT2952NK2bW1N2nn2np23e2KO23b312K31812v61e1H22V2BM22F21E192I02Y8231317J1F1v1U31C91T22O2Bt2S9162Fw21d31242Ln23a2ih2Hh315231542YZ2As2d32c82cA2ny2fq2HQ2uN214314e1r23F2eE29u21K1a2af2S22y51m21G2b11l1I192ac23i2g62vv1J1422Y2ps27b1j2WW31L51b23b2g62zx31m331o82xp22U1f31B32g622E31os31262BM312r2Z923i310Z2bV2w42W62By2W92WB2L62e022Y317t2jJ317L31oZ2d72d322p31e11T182RB31PQ2sW2sl2c62Rf2d3311W2FB313t317Z31Q8319n2e831nL2cZ1H31Nw2CB2zC2A72202131V2Q41N21c2GO23h2xU2bn21j2iY2bk2c22Ag2hT2HV314N2d32eh2dQ2g91723H1i2761021321g2ww2371a1N23h2g62F931E1317B31R521n2T42DN2d931p61o2He2fw1Y312S312U23123y24K26W22S21H1B21F23X21831rw2ZE311s31921x2sT21h21l2Dz1923J31NO31eA22V2ww2341S1u22p2ih317H317j21m31E62Iy31dG27S21V1k26i22322221E22j26b218317z2bO31rZ2K82AF1121J2132cB2DM2tH2G62Gf2e51D23J31sC27b2Jm2KO22P1k2T431b231R7318s2OM1I1m21H2dL2dn2g62372Ov1m31472G62TP2O722N1x2Ko2A91028t102vL2kb31Kf2am312L1621I21e2ot319d2I831M81b2132132J622u2182471326p22z24Z22l26Y2n51O29u21M1431461d28J2l821O21F151d2e421R2aX2rM314t23b317z235314L1G1G21M21C1131FX1H318v2dN2y831re2BC1Q2gT2Rd23J2LB23631Cw21D218316i28v21m21f1P1k236310Z31xF1R31XH31xj316K31bP316O2T1314q2V62QR319631a522O2lB2XH2Za319321I31EJ313I2D72Y822A31uJ2U931QW31ax27b22i21H2s01b1c2Lp2R028F31262y82rw2ry2S028e31lJ31o12in316w2oV1231562xp31Q22YJ23H2J12Sf2B31n23F2kw26O23t21l31jZ2A01023A2QS2D331Lh31av1B28222T22O24l1d23I26T1S2502652mV2QP26726722B2J12361j2j41b121y22428229o101131SD1y1z31SD31Nr282317i31ZJ2122Vd28i31UX1021s21T131221921921f21f101I2il24124127B21s22a1m1424T24T321822a1N1523y23y321f1k16142xP32191L1726u26U321f2p922p22p321F1r19252252321f1O1A25W25W321F1p2G328d320U314Z1C243243321F1V1D2bY27632191s1e23l23L321F1T1f26c26c321f2lI22W22W321f2oV2E7322M22A321325M25m321F111j25x25x321f161K21L21L321f171L240240321F141m268268321f151n26M26M321f1A1O3222321F1b1p23P23P321f181Q24C24C321F191r24x24X321f1E1S23D23d321f2oT229229321F2VR271271321f1d1V152Sw321921e1w1f1e323421F1X22V22V321F21c1Y244244321F21D1z265265321F21I21023f23f321F21J21126G26G321f21g21223n23n321F21h21325H25h321f2QC24k24K321F21n215247247321F21k21621S21S321f21l2171q1q321f21Q21824Y24Y321f21r21923x23x321f21o21A24a24A321f21p21b2J632341Y21C249249321f1z21D24O24O321f1W21E210210321f1x21F1k3129322D320q23r23r3218320w1221g21g31jq2EE2iL1p2JN322D321B25c25C321F321h1A2c0322D321M225225321f321R24v31G2322d2p921n31nQ322D32201z1Z32241A26K26K32291b22M22m321f1U1C23i31qi322D322J320z321f322o152na322d322T2M232342lI1C2jY322d2ov25o25o321F321331Ca32391j242242323e1K24h24H323J1l27F3234323p22f22f323t2v81J323y1o1X1x3242322a2ph3219324826t26t324c1R226226324h1s1G2ag322d2oT24b24b324q1u26b26b324u1V314I321f32502x6321F325523423432591y24i24i325E2u62EF3219325k238238325O21122R22R325T21221R21R325y21321v21V32632142EB326721523S23S326C216261261326h2Nn21k326m2ir31uS3219326s320X3234326x245245327121b25S25s321F3276323w327A21D31903234327g23q23Q327K21f1y2ta327P21g25v25v327t320X327W21C21E12321413273273321F321B321132871525y25Y321L162bE328F1726D26D321v18216216321Z191v31Rq322d3225269269328V233233328z1C23T23T322i1D21a21A32971E3105322S1f218218322X1g25025032311h24n24n329m1I231231329p24E24e329t2qP28c1L26h26h323o1M28k32A425q25Q32a722K22K32AB24S24S32471Q31w032aI21P2Dh322d324I22L22L324M1t24Z24z32AU23c23c32Ay24m24m32b11W1U1U32B41x26w26w32B826j26j32BC22i22I325j21024u24u32BJ22g22G32Bn1a315B3219325z22n22N32bV25N25n32by27027032C222H22h32c626x26x32c923a31b4322D326s320O322d326X25I25i32cj276327521c25T25T32cQ25L25l327F21e26226232cX31Wy321F320Q22d22d32D5327V327x21f1332dB27227232df1422U22u32di31OC3234321M31p832dp24g24g32dT26i26I32dX26o26O328R26n26N328v21y21y32E823G23g32eC26026032Eg26a26A32ej24r24R32En25U25U32er31jU322D3213263263329P230230329T248248329X1c31DJ3219323p327D32A422S22S32A723223232aB22e22E32fK25j25J32AI1w1w32AM26426432fU26P26P32aU26F26f32ay22722732g421w21W32g81D2ki322d325A23523532bc320332GI327w32BJ22422432BN23v23v32BR23z23z32Bv22O2W0322d326826z26z32c223j23j32c621D21D32c925z25z326R21921e2QL32He21A25G25G32cJ22122132CN21C23723732CQ24Q24Q32hR26e26e32cx24624632hx21g21z21z32I132D721G2nA12282101d28931v314220220327t322L2nB21I3213321M32mr321825F23r1432Lm27b21B1g21O320e28221r32N8101Y24h32N232Nb2821M25r32c5320m1032C427b3276321B329R27B122q0321o141625224W112By29O2Qr32Mx1626Y26y327t32991631Mk323I32MP32h932NT32NV321o321n32Da321H32fZ32o92Xp32EL3213321h32Of1032Nu210324x2lK1432dA321m23U23u32MT2sw32OP31eG2D732HA32Nu21332OB32Ob32Oy1i321r23W23w327T2E727B32p5321r32os32nu21228g2e732pD2P932FS327T28f32PK32eM1I2p932PN1z21531r21832OJ31C91932P1327T31Oc32px329n2Pf32p81Z2142Ej312D32PD3225211211327t2J632qC1I322532Q121732gq27R32pD322A32q9320u21t319032qq322a32Q12161B32R732q6329032Qm327t328932QQ329032Q121932JP2NU32pd322j32Qz320V32kP32Qq322J32q121832Mn2rX32Pd322o32rb32r0329g32QQ322o32q121B1e32S432Q6322T32RM21t325232Qq322t32Q121a2eb2OI32pD2lI32rx320V2M232qq2Li32Q121d31Wy31DX32PD2OV32Pg327t1H31Mh32OP21D21h1432851n24Y24l1I2oV325732Og2pN31RJ162202261x32TA2bW1D1b32tf31rJ2pb24U25731sc1J32EE327t32aO2HA21U21u2cq1l14328122222j1h21d21g1532t223g22z1h1k2Y21P2222261432T61h32hm32T932tL161U1o2Dw1I25a25A329P32UR329t32uu32R032AO327n32TV2CQ32uB32ob32U132u332u531Lo1n22n22032uH32i732uk32tB32PD321332Mk3234323a266266329t22J22J329x32vK32ts2PB1L32v032uA1521c21c32v432vb32I832Ot31Jp32UL32VF1I32vq322D323A21x21X329t32w73219323K32O432UX32Vs32Vu32uB28g32V432u41522B22B1N111m32Uh32uJ32w232tG32UM32Uo321321521532uT32Us322D323f320H32Vr32uz32tW32VV21m21M32VZ2oV32Aw32Vd2bw25525b32Tk32tB313I32vv25b25b32xE1H32S432Xh32q6321331RJ329p32Xx32x51k32xZ32we2AF2Q332wH2BE32Wj1523623632wm32u525D25d1n24u25532Wn2392391n24I25132wN24J24j32ym32YO2bp32T221721O2hE1632U02271532WU32hn32ww32UL32UN32UP32Uw3219323A32Z922a323f32Z921t32Uy1K32vu318A32V332u231OR1632v732v932W032xu32w532WD22A32w932Wb32y032Zu323K22Q22Q32vr32Y732xa318a32WL32U232uh32XG32z532TB25l25r32Xl2bw2l81g318A25r25r32wm2bp26s26S1n25X25e32z332xU32Z7321324F24F329P31r2329t21t21t32x832Zi33051622x22x330M1622222232Ys32Zn2282281N22K22332Zn32Tv331E2V032T225A24p1h28u32z032z22OV32wv32nu32wX330v32Uq32x432zA1j32zC32ze332232ZG32UA33152cQ28u32zL32U32v032zp32Va2Ov32VC330B2Bw32zT32vl32w81J32Zu323f23k23k32vp332n320V32Ao3304332b1732VX32xR332j331Y32w432Da321332Zu32ZW32Wc332v32f432sw322M3328332Y331s32pQ32wm21l1832t222Y23H318M1832u022517330T332k32Wy32z8332232zv3324333Y3326331432VU1p32Q5331B32Zm333K332g32Zr333V32w5254254329P332q1K26Q26q332u330332VT32xa334533313308332I32w1333432ve333632w6333B323A25F25F333a329X32Y2333F334n2cq3345330732u3333K32wP32WR32wt331W32Z4334u2BW332023M23m329P21B21B329t2592593343334O1832xc32xR330a335H1632Xj330F31Dy1d333P32xp32XR32xT334c334w32y2333z336a323F336A323k3354332X3356333P32yA32Xr2552553218229334532YE32xr24D24D336O1o19328532v41H336W32u021u18333u335y332032zc32zB33411K32zf32ZH32vu336w332D32UH32Mz320U229336w31Lo32xr26r26r32ev32wd21T2j631RJ327b1i334b335y332M329P33503352322D336f32y5332W32wi32xA336w3359330932Ax333V330D3361330h336w330K32XR256256336V19330o32Xr331x32W332TB33203338332P333B323F337R337d338819331832v41132ao320H33122cq336W331C32Xr223223338M331g3393339511339733701932tV32Xr23o23o32Vr2ej22422L1h32TP313m32VR31Rj22322G2HB2Ow32x71021221332Tt1J323H32132ov22a3235337j29k336Y32U22pO2Jm32UD333s3375338r335i32wZ332132X332Uv3327338z2cq29k337G2Ov337I21s22929K337M334R1h333333aN32Xv31EG2Q5332o334H334J334L32Y6336I2oq32vY33B433B632Wx337z332O338132zY333b3384334M32vU29k335921d21n1a335C32WS33Am331Z33Ap335K335M335o32Y0335q335s33Av1A335v33B4335X33B7336032Wx32Xn29k336533B43367337Y33693385336B33cP336d33CP33bR33Bf33bT1A336k33B4336m336o29k336r33B4336t336o316733AG31Rj316732U021S1A33c132z633AP3378334033as33c91h316733Ax1H33Az229316733B3339U2OV337o337Q332v21T3289337U21D337w334S32ZS334W338u33BO3219338X33bQ32Y433Bs32XA3167338A32XF338c335y338e32Wx330H3167338i33B423b23b33D61B338O33b4338q33c232UP338U334h338y332932vU3167339232U233942aG339I331333DL1B339a33b4339C33ER339F33F5339H339j3167339M33B4339o32vr32r7339S339u323A339W32WH339Y33a0313Q32hd33a533A733a932uH25P25p336O2IA33D82Dz1c333R333T335f330U33Dg333y337933Dj32wH32x92cq2Ia33DN33DP2Ia33Ds337X33B7334D334f33BB338W1k26v26V33bE3386333g2iA334q33Dt33b5334t33gR33e5334Y1j33e732zd1k32ZZ33EB33cV32XA2ia33bV21p1C33Bz335E32ui335g33B7335J335l332O335N335P335r33gi332a33g833cC33H433cE32wX33CG32Ul32Xn2IA33CK33h433CM33h732up336A323A336c32Y133ct33hf33h0336I2iA33cY33h433d0337j2ia33D333H433d5337J1s1D33G733Iv32u021Y1c33DE338S33gE33AR32y0337c33f132Xa33iV33gm32MS33Iu1D33Gp33Du337P32Je334X327T329g33e033E233H533e433EX33H933Hb33e933533385335532vU33iv33ef1h33I232Ul33Ej32ul330H33IV33eN33H42w4336o33iv33Et33H433EV33DF33jq334g33gV33f033GJ31811d33F42ag33fI33f933IV33Fc33H433Fe33JD33FG33ko33F7339J33IV33fL33h433FN32wH32mn33FQ339V2Vy33fu1h339z33a127832mL33fz2oW33A832OD2Ov1N2Dq337J1v1e33G733ln33ga33J233AO333X33J533E8337b33at33j82cQ33ln33JB336o33lN33Jf33Jo336832Up1K33ba3323334h33gx33gz33jW32xA33ln33H333gQ33bl33H83380335133BP33jU33ec33M01E33Bv21r1e33Hm33lS333W321333C433Ht33c633lW33c833hx32vu33LN33i0338b32XU33i432xM336333lN33I832uh33IA33MK33ic33cP33iE33cR33Ig33Mp33Hg33MR33Im32UH33IO33b033LN33IR32Uh33IT33b01u1f33g733o032u021w1e33mX337733gF33Di33j633lY33Kk33O033M2337J33o033m533DV33jI337r2M233jm33MJ333533kg33BN33mN33lW33hE336g33872cQ33O033jZ33K1330C330E33Ek339433o033K732UH22T22t336o33O033kc33O733aP33eY33kI33Dx33Au1h33o033KN33F6339633f933O033ks32uh33kU33nZ1F33KW33Pm33F833Ox1F33l132Uh33L333862eB33L633Fs33l8338633FV33Lc321o27B33lF2hA33g12Ov22Y22y336o339433G7339433Lr33gC333v33O833Lv33HC33j733kk339433oF33b0339433OI33jH3219333733dx32Sw33ON33e333m7321325325333Kh329T21h21H33Me336h32Vu339433Mi33r633CN33oQ33231i1j323433JT33831l25K25K33mq33ko33oZ33Eh33b733K332tB330h339433P62Ov25825833qj1g33PC33QO337633PE33H933ez33Ph33Lz33ko33pL33kP2cq339433pq2OV33pS229339433PV33SL33ko33L133A310328l32132p932NS32W232q331r21623g23e112J632O332mW32Qr2U032ML3219322A329o32OT1g3290329V32OG32Rh32Jp16330i29X1D33az32s91E317I324X320G32kP32S432v031832Ay1222421S2KI32RD1032P5329026l26L327T319032gq21w2202KI31OC32Gq33A9320F32N432nd2132sW2A033ty32nm33a3320J320l320F32hj2cL32BU33v01032A9320G320L33sz2A0320o32J727b1924o25g25426A22x23722a25325L21621o25123926c2LN23622123f22y25w2431U22223U21T25L23o22G31xm21621b23N25525l23j24221z23N26r25M2192382211O22424h1Z23F21822x26621i26322322s23m1e25T21w22j2522621a1G32Q324P26222j25l24F24W23N1526324723C22c25L1E245329s25f27325Y22D24s2BM31Q231da23H2201J24n25M25a24726O26121I25v31MC22s23121I22z25s21i22q24J21t22122q22225T23d31k42h8192hA2HC2HE23F23Z25J2511b23e24121x1h22123D1325824025u24p23824025l25j26024j1l21O21X26g23522121Z22b26524f22126p24x22w21J2591Z22n24o21S25H25w33zh25s31A225E26O1W22e22h25l26s1926U1327623K21Q2531426i24222y25G1626k33Zh21425n25w21q2211l25c22K25v31lV31lx2VE1823021D32f524b25E1Q23325Z21i21y24R26O26S31Es21C22A25222I152sj32k82r621i25923T21b26Q26G21725G22G25225t1b26523524Y25R24122B25l1m25j21524u23j2in26D25L26422v171B22E25Y24L33x922u25n24d24924V1V27322825226o23121l24226K1v27133zH24h21026R26825q1K26122k25L31Pw312C2PS1822022125D24P22922726y26b22E23422121S256237314325w24s23125221p22K23k2aI24d23V22E25l21a26126D26329l1233YB22J1R25w2eM24M25622i33z921021L21f23w26723m33zH26l22e22b21t26v28f33zq23f2622422S425h25Z33vT343r343t239343v26L21i22c25Y24d25225p266344r22122W25J22324Y1623w21W22925L341226h3414341622F25223521P2512272161526e21I2Ns1b33x531gp23p22f25l22t1i32Q326F21224n26x25L26C230341821423e24I22825L342M342o342q27333yB26O2471w25Q21o22l24i1322126621926023n24S25P2x625l24826A22V24427026622425T21I1i23U24o26126C142231b31ZI2a026O2272521N25C24t1J26123Z22H24v25l1L21821123926725L1622621J31B0314322125r246343p24G18347D1622832zi33Xa33XC33xE24O21W22F25v319y31Wr1D2B02SG31zC23322s1B23T21922a1g342T22h22S21N23326p24W1P23C33wk33wM33wo33wq22M25225m23b23d24226M2271h342T25P24A23A22022J22U21225725l21z21v21L24R2301424324k25l21j22T25626626f25R26P33y325V26124U23124w23A24134922Fq22b31vL31vl23621424J151Z24s25H21422924j21i24d23K22422G22b1321R348a22T26U26Y22O2192731722Y25222024524p23H24y1l21c346d2ps341M349w349y34A01H33yb1c1g21s26I26l22Q22N348A21p25021j26v21U25M22822g25l23C24s1324h1a23C2241122125i2331126622L24H1M22D25L21N26P1326726N24J259347o25h1n2fU21C23I25926r25L22h1A27226325f22921v1H25224426S21S22X26i23N24r25921i25123022v25Z22s26k23424N31vt22G25M2Mn2632401722122725X22f25g21g23J26124t21i24326e25D23M21q26221G33Yb2311m24C23524j1q25d2mu23q26I2212242Uz26z347o210346921521423N21b33x931jL23M26p1f24L25I24325l22726O21x1e21524v21324C34aC21l21g27026C21222223B22122Z26125c26z2uR25u25025l22X26122v22P2171N26R348j247171V23d23Q23P21622X25224S25q22526X24z265212346d22324326l25825h23822225725V2D331ZA2Sh23e23p24g26V24K325u23R25x31F325B2121123J26626824H34AL34aN34AP34ar22H252341a341C341E25U21i24z24h26n1b2501626t1725223j1Y22P23826t22q227340621y24T1l24o1Z23b26h320025c26g1s24d22V22225423934bl31mh2db2cY2d02dG2Di2dk2dm23h23p26f2581824y345i33ZH1s2592312111124z21P348a25x1Q2401M21j2502302402Dg24d27225z21122026433ZH25e21323825j21925r2731222124123Z23b34iR259349g25l34fF34Fh34fJ22925222E1C22Q26m25w21y23423h34gh25E346721V22n1G23034iq34is34iu22E23F340634E134E334E524R21p2522382392S31Y26a23u1a2211J24Y343422o24Q262348a21t24w34i125B25r25w34aB25b24m26s21w22s26925a33x921921M21V21p23r23x25a26J341N22f22t22h1i24M1U21H22125L25522522326K22B1E26P21i2261W2411921m24434hb31vt2161225V25O23F24f341834EZ34f134f321G342t22k23B25F25a2391E25f2mU21g1u24525y21a25R25323a22134Iz34J134J326h22L25234m434M625M25424T25L25822D24L1q25A1d23d34DA1P22W1O22o2692551Z34Hm2G62952971q23H24626M24024H23s25H24a346d21e34No34Nq34ns345Y1G1C25k25e23v24221R23D221342w22y21J23A1g212310S26b25326924J314e22434oR1321M313N21T1422D348a22Z34Le22134Lg1g26K21i1r1525O21024K26923V26p330d25524q25m25t1a21A34Hy1522J22821Z1s21s22W34go24w22D2721i26425f26123d2521325Z1q21K24r22826a33Y3341i341k10348025224l1123923R24p24926v34CS26c24T23H25921o21C22W33x134mq34MS34MU25a22z33Xr2xp2Xr2V623033XK33XM33Xo34hY22424w1z1m26U26723h33xi33Y51733Y733Y9342t26N26124B23f24H23022U34gO1021M22M24222d26l25u34Da24725E1f23722B26H26F25925l23x1522U21l23H22623F34451V24125023w21X26T24b33xI2191J22626X22l25g1Z23e34Pz25Y1A21Z2533153348A1c1t26s25v24n26v23L25t2182Ww2841I23I25Q25427224H26823525y24n21A26k1233Uv320I320K27V320F337W1033it32nu32Aa27b1622P22V33v534vr21Y21S34VV31vK181E34vz2d723433ro111o31wd32W21W320H28e24V24P1i1G1232WA321f2il327R32i932Cz32di32jt328B16328P32DP322G32dT34wT328N1932AK328R34WX33tg1b324K32E834x222A322j34wQ320V33tZ1D32vU2Q334w82222232eE2DW32GQ32nt1g33rP34X032R0320L32mz34VM34VO1z34Vq31vk34vt34w334Vx34W334W134w323A34W533Rp34w832oG34wB320h1634We34wg1232l334wK1333Ac32I932dZ34wP327e34Wr34x7321R34wv328J1834X7322034XP3219322534x7322A34X5322D329034x734X934yM34xB318334xD32XA34xf1o34Xh34xJ1034Xl33Tj34Xo32AL34xQ27v34Xs2DW34xU34XW34VS34vU34zo34Y034ZO34y234ZO34y434w634y734Wa34WC34YB34wF34wH32yq34yG1M2ol328314327n32DI21K32C834yN328Q322d321R329634Yr34YT34wz34ZI34YW1a34YY1b32EI34Z12PZ350F3219322J350c327T34xC34xE1034xG34xi34Vm34ZF2LI34Zh327t34XR32MS34Xt336u32W234Zo34XY34zR34vy34zt34W234zv34y534w734W932nu34y934wd35021231lO34yg32MN32i932rm321g1532fF32dM34Yo1732Me34WW350U22A34yU350m22A34YX3526322a33qh34x63526322J352032R0350Z34Z9351134Zb351334xK315b35161134YV21t3519321334Zm351c34Vp27V34zP34xZ351h353034zU353034ZW34Y6351N1Z351p350134Yd32Hd32192Il32KT32I932WP32dI325w35213526321r32f0352532dX34YV352A350O352c2lE2a7321934Z2352G1d353L352j34Z73510351234Zd351534xN352S350M352u34Zk351A352X32Og351E34ZQ353034zS3534351j3536351L34zy351O350034yC34wH32Ib34yG32g232I932b0322D321H32cH353m32Dp33Uu32192P9350K353s352B328v32Bt352f32EC3551354332Mn3545352n3547352q3549352t352v351b354G3530351F354j353334vr353534Vr3537351m34y8354r351r329234yg32dV32i932fa354Z1535423219321m3522353P350J3526352834X1353V32JD353y350T32Ec356933133544352l35463514355k351734ZJ2Cu354E34Vn352Y34Xv355Q354i34VW355t34w0354M355w354O3539353b354S1232Ya34yg32bx3508330X32dI32DO350E32dp33TI355534YS356F350L356h328V3278355C329431wI2CP355f34Z82cQ34ZA34Zc356s34Xm356u320v355n354f351d3571353234y1357631Vk355x354P353A356034yD32dH322D2iL32E632I932os3219321H34x7356b353N17353S3556357P3558353U328V32XC357u350V1D34x2356O355G356q355I358334ZG354A3518354d352W356Y355P34VR355r3573358C34Y33578355Z34yA357B325C34yg32bh32i932kY356732l03552350G1732pu356E353r35293559322D322a33eP359334X81d359Y357Y355H3582352P3584359d356V2DA356X34Zn358a351g359m351K34Zx3579358i34Wh32hW358l1332iy32i933hu356732Jv359Z321q1722Z22Z353Q34Wy358Z350p326k35aa322j35b335AE359935Ag34Ze356t35aJ3586359F355O3589359j357231vk354k355U358D34W435as359p351q34YD32g634yg33A935083310356733n0356a34wS358u33Rd35b93219356g32e1359035A71B32k735be1d35C83597357Z32xx356r35AH359c355M35Bo3588352Z35bR358b351I359n35By34ZZ359q351R32l934Yg321X32i9326u357i357X35c93522357m22a358X35a4357R35Ci357t350S34Z3357W350Y356P3580352m35Bj35483585354c356W359G35an35cy35Ap35D035ar353835BZ353C34Wh32HZ34YG32Om3508326z32Di326A35b422a321r32JP35cd3527357Q35CG350P32Ij35cl35eE35bh35dR35Cr35Bk35ai35CU35dx35bP35Cx34XX35Bs1635Bu357535D135e435d335C034Wh32Gu34yG32Tr350832X135ED326b357K35A035ei35A335ba35a535CH34x335eo35Dm354035eq34Z6359835es359A35CS352r35eW35Al35dy356Z354h35Cz354l35f5355y35f735e612331834Yg33A33219321B32Lg32Di32as35EF321r328135eJ35cF350n350p32vX35CL35gI35eR35CQ35Fw35eU35cT354B3587359h35bq35f035g435BV35G6358G357A351R32m434Yg33Qb3508328x32Di32JJ35gJ1732vN35Gm35el35GO353v324535cL35Hf35gT3581352O35gw35FY35gy35CV35H035eZ353135E135g535e335G7354Q35d434yd33t2353F1334vv35gE31c42Ew358Q15357j35dd358u35dF35dh35Fl35dJ34x335dL356k35Dn35Ig35CO35AF35HS35Du35Bm35dW35g035EY357035e0355S35aQ354N35D235I435F81233v835i8323M32i932eX32DI358s35ca32DP358W357O35Di35Em353v359235FQ32ec3596352K35fV35DT35bL35fZ34zl35HX35j035h235I035H435I235H635Au1233PS22a2Il32sJ321A1431JN35je3526358t35Jh352935IK35ce35hK353t350p35JN35iP354035Jq35dq35gu35JT35eV35Hv35EX35CW35JY35Hz35J235e235j435F635j635g9331g34yG2Ha32i932BP35Kd35Hg35Ji355735FM35Km21M35CL35kQ35FU35KS35Iu35Ju35kV35Iy35KX35g335k035F435K235aT35i534wH23H23h34YG32YK32I9326535lb35fh35b535lD358Y35lF35Jm35lH35jo357v35LJ35cp35HR355J35Ku359E35KW35JX35lr35L035I135L235i3358H35lw1232ea34Yg32h332I933az351y35Jf352235m735jK35HL359135MB35KO35jp350u35IS35Bi35lm35Mi35aK35jw35Dz35jz35Mn35K135mP35K335Ms32mA34Yg32WG35Ib32fM356732OB35Hg33q235DG35JJ35Il35JL328V321J35cl35Nt35Hq35ds35NC35Gx35mj35Lp35ml35AO35nI35lT35NK35Lv35J7320F35AX32V0350832Lq35db35Hg35Ij35nx35kJ35bb353V35IO322E35iq35dc35Na35JS35o635hu35o835Nf35g235OB359L35L1357735J535Mr35j7330134YG336A321B33P832di32GG35HG32KJ35Hj35Or328V32Km35CL35Ph35O435eT35IV35jV35Am35P335J135P535MO35p735L335P935G933TM35ax32Fo32I9324o35pG32GH35M535eg1735pJ35FK35oq35M935Pm32KN35mc359435pP35FT35mf35O535Mh35o735nE35pu359i35nH35pX35nJ35PZ35MQ35h734Yd321634YG322Q32i932BA32DI32r732DM32Gn32Dp32CV32dT331c32DX32ih35Cg32K1328v33FT356K32m132Ec32Jm35DP35LK35mG359B35P035Qr35g135Qt35kZ35QV35OD35Qx35nL35J732Iv34yG32lj32I924L24L32Di322Z35HG32JY35pk35Qg35ci32C035CL35S935pQ35gV35pS35LO35P235rv359k35Bt35742ry35BW358F35oF35G932F32iL32l632I933lK32Di32b335Qa321R332s35sC35im22A322a324a35cl35t235qM35it35qP352R327i35P135Qs35H135Rw35sp35J335Rz35su357b32Et34Yg32OP3508328D32DI339734WR34vm35A0325M32dT33K935NY350n32BL328V32A232E82b032eC35tX35tD35nb35Tf355L35Sl356x32Su359c32lX35Ti33v627v33v827V32xT32fi33vC34Pr34pt34pV34PX34kS34KU34kW34kY341x341Z3421342325L34mB34Md34mF34aB340O340Q340s340U25L34HF34HH34Hj34Hl343b31Zj33vc34iR34it26t34Ln340634Eq34Es34eU34Ew21I21Z34GA34Gc34Ge23B32Wq34sO2XS3410346F346H346J346L24X34I034I234I434i634nG34ni34nk34nM34c6348134iI34ik34im34io349V349X349Z34a1342t33yS33YU33yw33Yy347y2R525r21i34K434k634k834kA21I33vV33VX33VZ33w134i734Ao34Aq26P22H24S2Ko315833yO2Hd31ZC34lw34LY34M034M234ty34u034u234u4348b348d348f348h348J34T434t633YA21i3457343U343W25234ql34lf34LH34QQ35Y734qN34LH34lJ34aU34AW34aY34B025L34BY34c034C234C425L33z133z333z533Z725L34q034Q234Q4310s34TP34Tr34tt34tv25L34P134p334P534P7348X33XD2633490346D34Bp34BR34BT34BV25233Za33zc33ZE33ZG34Gh34gJ34GL25k34GN34932Ph2PJ2aZ2Kr31zC34r834ra34rc34Re34CT34Cv34cx34cz34d121p34kd34kF34Kh33ZH348R348T348V21u25L34bH34bj34bL34BN25L33Zs33zu33ZW33Zy3478347A347C347e33XI34fM33x534FP34FR25L34LQ34E434e634Lu34d334D534D734d925L348334853487348925l34cL34CN34CP34cr36161k348m348O234313o31DE2KJ31sk345L345N345P345R25L34cd34cf34Ch34CJ25l34ID341d254341f25234JW34JY34k034K2342534273429342b25l21E34eJ34eL34En22134O834Oa34OC34oe221342V342X342z343134EP34g234g434g634G833Xw33xy33Y033Y221i34gq34GS34Gu34gw21J34Rx1M341L34813408340A340C340E361Z34if21I33wc33we33WG33WI22135xz33y822Z342t34jP34jr34jT345J34n734N934nB34nd34nN34np34NR34NT21I34SI34Mt34Mv34mX345D345f345H345J345u345w3417341934j034j234j434OL34473449344b33Yb346n346p346r346T34SA34sC34Se34SG25234Ss1033XN33Xp252344t344V344x17344z34513453345532lY34Ti34Tk34TM34Da3433343534373439361t34Uu34uW34uy347O34L034FI21I34fk34mY34n034n234N422133X333X51833x733x9347Q347s347u347W313O28R31qW23034Oh364G34j521I23134uN34uP34ur361b34403442344425l3460346234643466221340021i34023404340634f734F934FB34Fd21i349i349k349M349o34fh34Sx34sz34T133xi34t934Tb34tD34tf33wB34lL34Iv34iX34Kz34Fg365O26z34L334Q734q934qB34Or33Wl33Wn33Wp33wR34qR34Qt34Qv34qx34qz34hs34Hu34Hw25x21833Xs31d931dB2G62212oG2RN23134dK34Dm34Do34Dq34oN26r34m734m925l34Rp34Rr34Rt34Rv21i34Rg34Ri34Rk34rM252367r349S22x349U340G340i340K340m221346v342P342r342T25r34r134R334r534Hy34u634u834uA34UC25l34J734J934jB34Jd221360y34ls34e834L534L734l934Lb343h343j343L343n343P34Gy34h034h234h425233W433w633w833WA34Kk34km34ko34KQ3468346a22T346c25L34C835wR34Cb34V132ML34V323i34pe34pg34Pi34Pk368L34qf344V34qi348a364w364Y34Hy34AM35xc34ar33y333vn33vp33Vr1G33VT33Ve33Vg33vi33vk347g347I347k347m347O364B3415233345y341o341Q341s341u2523695346X33Yb343e343g34fT34Fv34fX243340w319T31Lw31LY23034ot34ov34Ox34OZ34Ac33ZK33zm33zo33zq33Xb35Z833xg33Xi34Dc34de34Dg34di367034dT34Dv34DX1h34cv34jg2CW34ji2dE34Jk2dj31V623h33wu33wW33WY33X0342U3471347334753477342E342G342I342K25L34A434a634a834Aa25l364334Sk34SM34Ho35ZU1123e34ue34UG34uI34Uk22134V634V834va34vc34Ac34AE34AG34AI34aK349a349C349E349G25234PM363z34PP25234NV34F234f4344D344f344H344j25l36Ee34nX342T35y3345924s345B34S234S434s634S825l34ea34eC34Ee34Eg21i34b834BA34Bc34bE21i34h734h934hb34hD25l34o034o234o434o621i34MI34mk34Mm34mO25l368h22O34OP34oR3636341l35x033Yd33Yf33Yh33yJ22125J344M344o344Q23525226s34vg33uz34VI33uy32n932nM32ND21c35fx35kY24e24834w321a21434w32LO34W324424234w635uJ35L423D31uR34WH35Nn35q432fp35IB35E8356735Rh34wR35o335b535Rj35Nw36h435EK35TZ350N36H8322A3566356K36h8322j36h235Ud35Dr32Pg35bj35b735Ai36HA35IX35jW351536GF36gh34ZO36gJ36gL1M36gN36gP33rp36Gr35Q136Gt34yd34X72iL35643508355e35Ie36Hi22a321m36h8321R36h62p936H8322036Ha353t36hC2ZG1t32e836hG1d36Hi35ox32XX36hL35hS36hn359C36hP35gZ36HS34zo36Gg36Gi36gk34zo36Gm34ZO36gO36gQ32ph35g836i434wH34wo35ax357D350835D6356735rB36h3319t35B535Q3357N36Ij1936Il322536iN35dF329036iR36jM36hJ36iv23w36HM35b836iZ32Be36hQ356x36J2353036j436HV36j6353036J8353036JA36i136JC36GS36gU1235tT35i835H9350835da356735D836JN32dP356936H736jo36h932be36Im36KZ322a35Ig322e36iR36kU36K12Q336Iw34ZD36iy352R36j035HW36ka34VR36kC353036Hw36j736hY36J936I01136i2353B36jE12350a35AX352435oK32lr35ie351v36Kv35a035C836kY32Dx36JU27R36l31B35Q7350s36Ir36M136l91036Lb34vm36Ld354936lf35MK36lH31vk36lJ34Vr36ll36KF36ln36kh36lP36Lr350036lT355435K71335ot321B35B135IE359U36m235B535sH36jr36Kz36Ik36L136JV36m9353H36MC36Kz322J36N636Mf36MH2Dw36Mj33RP36ml35O936mN1636mp31vK36MR34vR36kG34vr36KI36lq36kk36i336km35OH35i833vb3508353e351y36ME36Id32Pb32dp36M436iI36NB36jT36ND36m8328v36Mb36hF36NI32Rt35ro35QN36Nm2pt36k536LE36k736j1352q36ht36J536HX36hZ36jb35E536lT35kN36n035PD1435u63567355B36N735Qb24P24P32DT36js36M736In35oj36on32eC36pC36nL36K336Ix36OU36MK36OW36lg36OY36j336Hu36LK36Ke36NX36MT36nZ36MV36O236ls36kM35R735AX358P35Ka35gd351y36h836ie36kZ321r36il36oG36m636Oj36IN336736PM357V36H436IU36La36pq36Lc36Ps36np36Pu36mM36Pw36kB36Py36mQ36q031Vk36ny31vK36o036mw34YA36lT35gB35aX35u335ib35Qd35iE35K936Qf32Dp35u834yr36Pi36Ql36M9354U36Nh32Ec32SJ36qR36MG36Qt36mI36QV34zd35RT35Rr36oz36kD36p136Lo36p336jD36kM35ck35AX35t03508354Y35Ie35kc36Pd321r35pN36Rl36oH36pJ36m935c436Qo359436sE36PP36K436Ho36QX36NR36qz36lI36r136nV36R333TQ36Q236r636Q436P436kM35J936n035Ql35Ka35SY356735MY36Ri35a035MU36Si36qk328r36iN35RL36RQ357V33tu35JR36k236Sr36k635UM36s036px36p036lM36P236kJ36T434YD35la35Ax356J35kA35t536Pb32bU36Sf1736pf36ph36Sj36rn328v36pl36L636oO36pO36rT36oS36nO36Ry35BN36QY35rV36nu1636nW36R436T11636R736q536mX36Km35JD35AX35eA35IB35r5356732B632dM36iF298326l36tG34wY36sK32iU32Iw36tL359436V635o436uK36rx36nq36Hr36sV36mo36sX36ur36sZ36R536Uv36t336S634YD34yF35aX35k6321B357H36v532B736u835BD36vb35KJ36VD35cI35S236VG35AB36vI36SQ36PR36ss36ts36GE36TU36s236TW36s436Ty36Vw34Wh35fj35i835Nv321B35tR356735L636U835AD36nA36tH35cG36IN34wm36wC322j36Wx36Wf36qU36wH36Rz36wJ36R036tV36ms36Tx36o136tZ34WH35Ec35aX34WJ350835gQ3567357f35C936v8356D36X036Vc36Ud35cI35fp36sn35aB36XQ36Uj36Rv36nn36vL36sT36vN36uP36vq36us36T036xG36r828e36lt35r335ax351T350835mw36u636v736QG36U936pg36W736L036tI36m936Uf36Jy36Uh36u736X836rw36XA36UN36Su36y836XE36q136Yc36uX36r936Km358k35I835iA35kA35PF35ns36kZ36Td35b536QI334636X136hb36M936qN36UG32Ec36Qq36TO36qs36Tq36Ov36wI35ht36S136pz36S336mU36s536Kl34YD350i35I834z035ib28G32di36Qe36oD35a036ZJ36rM36YS328V36zO36yV36zq36jo36y236zu36PT36zw36ns36UQ36YA36vt36uW36xI12350X35aX35fc35Ib35TH36Zf36YM32DP370e36UC370g35cI370i2nu36oo36Zr35kr36ZT36WG36tr36XB36zX36wk36zZ36Wm370136Wo370334WH35SB35ax35aZ350834Zy35iE370b36V8371536zl36L2370H2hO36x52RX370L36Zs36ru370N36qw370P36vo36Nt36Y936vS36uU370u36wP1234Xa36n035UA350835c2371236U8371y36xV371734X3371936ir371c35RP3727371F36zv371h370q372D370036q3370236o334yd35FE35ax359S35hC328y356734YQ36xR36yn35ul36YQ36nc372S35t81b33Ny36zP357v373f370M372Z370O3731372B370r372e36z6370v35u135aX35Pb350835LY32Di36pO36oc36V836Ua373J36oi373l322A36yU371A36pN36yX373s36x9371G36Z136y735Tk373X373436T2373636Q634yd35nR35I8350R35IB35s632di35c6373G32DP3562374b36w934x335Aw36xZ322j3751374J36yz374L36k8359g373236Z436ut373Z372H35Bg35I835cC3508359w35Ie3751374836yn375436xU36w836xW375731MH37591d375b372636Vk36Z0375f36tt36xd36WL36Xf36WN36XH372h32T835ax35R9350835tc351Y326F32dm350435a0354W34yR35m335U4353T35R135sE32c1350s35L8357v358n36VJ36y336oT376636Ox36Z3376a36Z5376c36YD1636Lt35GS35I835FA350835M13567352E36U8352i375W36YR36x236m935tV3723377J36YY36y4377436pV3776371K376B371M376D371o1235HN35AX32f3321B35hb35IE35jb36u835Rd3755375y373M35fS373p3594378A377T3773359c32s83775374O3733371L3735371n373734wH35A235i8353j350834Yk356735tA34wR35o135a035S434yr34yI372r35cG35UC373m35a9350s35GL357v3792378K36ul36vM36k936vO1l22622j34yd35Rn34zj317I32V0375i1622Y23034VZ1L1Z21i34vg34Vg27V33A5276317i33UN36ga32nD34vj27b33Sz33Sx34Vk32Ml36G732Np37Ac34vH35UO328m27v320o32XT35Tz1922I23224K26E1B25p25u24R25v2d934jh2Dd2Df2DH36CY2dm31dC2cl340Y34sq25B24226G22b25E26n25i25M24t36dn34982sI34942Pk349731ZB310936AM28522s35XH2h92hb35xK31Zd31Zj341M23L2151k22Y22U1325V25Z25324824F26421927021k22625N25331Gy263341b22W21e34bw2221E25w26126U26D22t34OF26k23j24Y2201w22927334l324F24y26126a24121K25o25G25325y2v524V23v23821L34CS37CM37Co21E26i368435w32v623h34w937ai37aB36G9359G32Xz35Hy121434w3131534w32hW34W328D34W632HD35l431vK34YD35Sw1336Wr35KA36xq36oa28934wr36u3321r375835Nw34Zf35Kj375S322536O5373m36q8356k36ZO322J36mE36Rt317I34Zc33sx35UP27b37aQ2Ef192631m27326Z22B24521O34Ul21122922625v23F21426i26f24T2bM34sp341023U26826026C24021Y26L26224t37b236cU37B436cx34JM1623h35vb21q19225260340V37bP35Zt349831rM33yM35Xj33Yq22724O1C23H21637C926325334c635X0367n34qa1421w25325V34v228523i24t21823923m21g24221G341g21v22525j32xp25T25i22W24s340X36c437Hh37hJ25B37hL26G21837Bm31ZB36Dp26v24B25a21026U26t24625w24M37dw28233UW37aK34vL2dW37ed35KY31dW34W331Vk37E81734W337E334w633Ia353b32TI34YD37et36n037862bY324y351Y37ej321M375S321r36Ob2p936qc322036u33225336A322A37eL329037ex322j36wr36Rt32S437F633v737AN37F92hO35CC"), (#TEXT - V90);local function CalculateVM(Index, Value, ...)if (Index == 465323201) then return (((BitXOR(Value, 860314)) - 242514) - 21441);elseif (Index == 788627856) then return ((BitXOR(BitXOR((Value) - 377053, 41880), 459123)) - 82953);elseif (Index == 887487555) then return ((BitXOR((BitXOR(BitXOR(Value, 937177), 545913)) - 940718, 908600)) - 706802);elseif (Index == 472861364) then return ((BitXOR((Value) - 112555, 5224)) - 55173);elseif (Index == 451589899) then return ((BitXOR(BitXOR(Value, 823903), 405615)) - 669498);elseif (Index == 346350879) then return ((BitXOR(BitXOR((BitXOR(Value, 886197)) - 50268, 642601), 393567)) - 34223);else end; end;local V1 = T[(494803018)];  local V3 = T["eW5I0V0i0P"];  local V16777216 = T["Zx2T0RdIZ"];  local V4 = T.PP0X5Ups;  local V65536 = T[((548967640 - #("string here......>.")))];  local V0 = T[((#{198;860;} + 0x3A81054C))];  local V256 = T[(0x267A7A12)];  local V2 = T.iFsQSa;      local function gBits8() local F = BitXOR(Byte(ByteString, Position, Position), PrimaryXORKey); PrimaryXORKey = F % V256; Position = (Position + V1); return (F); end; local function gBits32() local W, X, Y, Z = Byte(ByteString, Position, Position + V3); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % V256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % V256; Y = BitXOR(Y, PrimaryXORKey); PrimaryXORKey = Y % V256; Z = BitXOR(Z, PrimaryXORKey); PrimaryXORKey = Z % V256; Position = Position + V4; return ((Z * V16777216) + (Y * V65536) + (X * V256) + W); end; local function gBits16() local W, X = Byte(ByteString, Position, Position + V2); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % V256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % V256; Position = Position + V2; return ((X * V256) + W); end; local function gBit(Bit, Start, End) if (End) then local R = (Bit / V2 ^ (Start - V1)) % V2 ^ ((End - V1) - (Start - V1) + V1); return (R - (R % V1)); else local P = V2 ^ (Start - V1); return (((Bit % (P + P) >= P) and (V1)) or(V0)); end; end;  local Mode = "\35"; local function _R(...) return ({...}), Select(Mode, ...); end;local function Deserialize(...) local V45 = T[((#{0x0B3;0x232;0x203;0x262;(function(...)return 929,856,0x1DC,...;end)(140)} + 0x69539F2))];  local V4 = T['PP0X5Ups'];  local V19 = T[(20035971)];  local V5 = T[((145115731 - #("string here......>.")))];  local V5000 = T[((#{0x09F;(function(...)return ...;end)(771,859)} + 0x242B74A0))];  local V9 = T['W7ehymskh'];  local V27 = T[((#{0x1F8;996;} + 675930301))];  local V773634 = T['bV1AyWX'];  local V917976 = T.TjnI4SE;  local V3 = T['eW5I0V0i0P'];  local V1 = T[((494803037 - #("string here......>.")))];  local V20 = T[(0x34B25809)];  local V8 = T[((#{0x38B;(function(...)return 234,0x0AC;end)()} + 154852018))];  local V7 = T[((#{359;} + 0x3A7979C5))];  local V2047 = T["nh2emuUV"];  local V6 = T[(0x6B4271C)];  local V160575 = T[(550419510)];  local V1023 = T[(42067077)];  local V256 = T[((645560869 - #("string here......>.")))];  local V32 = T.D0RxU4yc4f;  local V2 = T['iFsQSa'];  local V21 = T.OomTl;  local V452825 = T[(896023918)];  local V52 = T[((#{0x261;574;} + 0x15A03146))];  local V667872 = T["ORvOoOs"];  local V31 = T[((#{982;180;(function(...)return 0x3DC,0x02A,345,0x217,...;end)(675)} + 0x343AC637))];  local V0 = T[((981534049 - #("string here......>.")))];        local function Deserialize(...)  	local Instructions = ({}); 	local Constants = ({}); 	local Functions = ({});  			  							for Index = V0, gBits32(PrimaryXORKey) - V1, V1 do 								local Type = gBits8(PrimaryXORKey);  								if (Type == V27) then  									local Bool = gBits8(PrimaryXORKey); 									Constants[Index] = (Bool ~= V0);  								elseif (Type == V9) then  									while (true) do 										local Left = gBits32(PrimaryXORKey); 										local Right = gBits32(PrimaryXORKey); 										local IsNormal = V1; 										local Mantissa = (gBit(Right, V1, V20) * (V2 ^ V32)) + Left; 										local Exponent = gBit(Right, V21, V31); 										local Sign = ((-V1) ^ gBit(Right, V32)); 										if (Exponent == V0) then 											if (Mantissa == V0) then 												Constants[Index] = (Sign * V0); 												break; 											else 												Exponent = V1; 												IsNormal = V0; 											end; 										elseif(Exponent == V2047) then 											Constants[Index] = (Mantissa == V0) and (Sign * (V1 / V0)) or (Sign * (V0 / V0)); 											break; 										end; 										Constants[Index] = LDExp(Sign, Exponent - V1023) * (IsNormal + (Mantissa / (V2 ^ V52))); 										break; 									end; elseif (Type == V45) then 									while (true) do 										local Length = gBits32(PrimaryXORKey); 										Constants[Index] = SubString(ByteString, Position, Position + Length - V1); 										Position = Position + Length;  										break; 									end; elseif (Type == V19) then  									while (true) do 										local Length = gBits32(PrimaryXORKey); 										if (Length == V0) then Constants[Index] = (''); break; end;  										if (Length > V5000) then 											local Constant, ByteString = (''), (SubString(ByteString, Position, Position + Length - V1)); 											Position = Position + Length; 											for Index = V1, #ByteString, V1 do local Byte = BitXOR(Byte(SubString(ByteString, Index, Index)), PrimaryXORKey); PrimaryXORKey = Byte % V256; Constant = Constant .. Dictionary[Byte]; end; 											Constants[Index] = Constant; 										else 											local Constant, Bytes = (''), ({Byte(ByteString, Position, Position + Length - V1)}); 											Position = Position + Length; 											for Index, Byte in Pairs(Bytes) do local Byte = BitXOR(Byte, PrimaryXORKey); PrimaryXORKey = Byte % V256; Constant = Constant .. Dictionary[Byte]; end; 											Constants[Index] = Constant; 										end;  										break; 									end; 								else                                     Constants[Index] = nil 								end; 							end;  							local Count = gBits32(PrimaryXORKey); 							for Index = V0, Count - V1, V1 do Instructions[Index] = ({}); end;  							for Index = V0, Count - V1, V1 do 								local InstructionData = gBits8(PrimaryXORKey); 								if (InstructionData ~= V0) then 									InstructionData = InstructionData - V1; 									local B, D, E, C, A, Enum = V0, V0, V0, V0, V0, V0; 									local InstructionType = gBit(InstructionData, V1, V3);  							if (InstructionType == V5) then  A = (gBits16(PrimaryXORKey)); B = (gBits32(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); D = ({}); for Index = V1, C, V1 do D[Index] = ({[V0] = gBits8(PrimaryXORKey), [V1] = gBits16(PrimaryXORKey)}); end;  elseif (InstructionType == V1) then  A = (gBits16(PrimaryXORKey)); B = (gBits32(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); elseif (InstructionType == V3) then  A = (gBits16(PrimaryXORKey)); B = Instructions[(gBits32(PrimaryXORKey))]; Enum = (gBits8(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); elseif (InstructionType == V2) then  A = (gBits16(PrimaryXORKey)); B = Instructions[(gBits32(PrimaryXORKey))]; Enum = (gBits8(PrimaryXORKey)); elseif (InstructionType == V6) then  elseif (InstructionType == V0) then  A = (gBits16(PrimaryXORKey)); B = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); end;  							if (gBit(InstructionData, V4, V4) == V1) then A = Constants[A]; end; if (gBit(InstructionData, V8, V8) == V1) then E = Instructions[gBits32(PrimaryXORKey)]; else E = Instructions[Index + V1]; end; if (gBit(InstructionData, V5, V5) == V1) then B = Constants[B]; end; if (gBit(InstructionData, V6, V6) == V1) then C = Constants[C]; end;  							if (gBit(InstructionData, V7, V7) == V1) then D = ({}); for Index = V1, gBits8(), V1 do D[Index] = gBits32(); end; end;  							local Instruction = Instructions[Index];  							Instruction["F0maLd"] = D; Instruction["NHdkT6T"] = B; Instruction[-V917976] = C; Instruction['JCFTTtHSvv'] = E; Instruction[-V452825] = A; Instruction["o2byT3LQ4D"] = Enum; end; end; 	for Index = V0, gBits32(PrimaryXORKey) - V1, V1 do Functions[Index] = Deserialize(); end;  	local StackSize = gBits16(PrimaryXORKey);  	local ParameterCount = gBits8(PrimaryXORKey);   	return ({ 	[V160575] = Functions; 	['Y3r'] = Constants; 	[V773634] = StackSize; 	["ND5dVO3L"] = ParameterCount; 	['dA5l6qrOx'] = Instructions; 	[-V667872] = V0; 	});  end;    return (Deserialize(...)); end;    local function Wrap(Chunk, UpValues, Environment, ...)  		local InitialInstructionPoint = 0; 	local Constants = Chunk["Y3r"]; 	local ParameterCount = Chunk['ND5dVO3L']; 	local Instructions = Chunk["dA5l6qrOx"]; 	local Functions = Chunk[160575]; 	local StackSize = Chunk[773634];  	return (function(...)  				local PCount = (Select(Mode, ...) - 1); 		local VMKey = (765716757); 		local OP_E = 'JCFTTtHSvv'; 		local Top = -(1); 		local OP_C = -917976; 		local OP_ENUM = "o2byT3LQ4D"; 		local OP_B = 'NHdkT6T'; 		local InstructionPoint = Instructions[InitialInstructionPoint]; 		local OP_D = "F0maLd"; 		local DecryptConstants = (true); 		local Arguments = {...}; 		local lUpValues = ({}); 		local VarArg = {}; 		local Stack = {}; 		local OP_A = -452825;  		for Index = 0, PCount, 1 do 			if (Index >= ParameterCount) then 				VarArg[Index - ParameterCount] = Arguments[Index + 1]; 			else 				Stack[Index] = Arguments[Index + 1]; 			end; 		end;  		local VarArgs = PCount - ParameterCount + 1;  		while (true) do 			local Instruction = InstructionPoint; 			local Enum = Instruction[OP_ENUM]; 			InstructionPoint = Instruction[OP_E];if (Enum <= 38) then if (Enum <= 18) then if (Enum <= 8) then if (Enum <= 3) then if (Enum <= 1) then if (Enum == 0) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 1) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum > 2) then elseif (Enum < 3) then  Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]];end;elseif (Enum <= 5) then if (Enum > 4) then Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]];elseif (Enum < 5) then  Stack[Instruction[OP_A]] = Create(Instruction[OP_B]); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 6) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]];elseif (Enum > 7) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 8) then  Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 13) then if (Enum <= 10) then if (Enum > 9) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 10) then  Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 11) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 12) then Stack[Instruction[OP_A]] = Create(256);elseif (Enum < 13) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 15) then if (Enum > 14) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 15) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 16) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum == 17) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 18) then Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 28) then if (Enum <= 23) then if (Enum <= 20) then if (Enum > 19) then local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 20) then  Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 21) then local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]];elseif (Enum > 22) then Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C];elseif (Enum < 23) then  local A = Instruction[OP_A]; local Step = Stack[A + 2]; local Index = Stack[A] + Step; Stack[A] = Index; if (Step > 0) then if (Index <= Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end; elseif (Index >= Stack[A+1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end;end;elseif (Enum <= 25) then if (Enum > 24) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 25) then  Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 26) then local A = Instruction[OP_A]; do return UnPack(Stack, A, Top); end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum == 27) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 28) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 33) then if (Enum <= 30) then if (Enum == 29) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 30) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 31) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum == 32) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 33) then local A = Instruction[OP_A]; do return UnPack(Stack, A, Top); end;end;elseif (Enum <= 35) then if (Enum > 34) then Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]];elseif (Enum < 35) then  InstructionPoint = Instruction[OP_B];end;elseif (Enum <= 36) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 37) then Stack[Instruction[OP_A]] = Wrap(Functions[Instruction[OP_B]], (nil), Environment);elseif (Enum < 38) then  Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 58) then if (Enum <= 48) then if (Enum <= 43) then if (Enum <= 40) then if (Enum == 39) then Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 40) then local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 41) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum == 42) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 43) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 45) then if (Enum > 44) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 45) then  local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end;end;elseif (Enum <= 46) then local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 47) then local A = Instruction[OP_A]; local B = Instruction[OP_B]; local Offset = 50 * (Instruction[OP_C] - 1); local T = Stack[A]; local Count = 0; for Index = A + 1, B do T[Offset + Count + 1] = Stack[A + (Index - A)]; Count = Count + 1; end;elseif (Enum < 48) then  local A = Instruction[OP_A]; Stack[A] = 0 + (Stack[A]); Stack[A + 1] = 0 + (Stack[A + 1]); Stack[A + 2] = 0 + (Stack[A + 2]); local Index = Stack[A]; local Step = Stack[A + 2]; if (Step > 0) then if (Index > Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end; elseif (Index < Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end;end;elseif (Enum <= 53) then if (Enum <= 50) then if (Enum > 49) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 50) then  Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 51) then Stack[Instruction[OP_A]] = Create(Instruction[OP_B]);elseif (Enum == 52) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 53) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 55) then if (Enum == 54) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]];elseif (Enum <= 55) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Stack[Instruction[OP_B]]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0); Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 56) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 57) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 58) then  local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;end;elseif (Enum <= 68) then if (Enum <= 63) then if (Enum <= 60) then if (Enum == 59) then do return; end;elseif (Enum <= 60) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 61) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 62) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 63) then  Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 65) then if (Enum > 64) then Stack[Instruction[OP_A]] = (Instruction[OP_B] ~= 0);elseif (Enum < 65) then  Stack[Instruction[OP_A]] = Instruction[OP_B];end;elseif (Enum <= 66) then local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum > 67) then local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result;elseif (Enum < 68) then  local A = Instruction[OP_A]; Top = A + VarArgs - 1; for Index = 0, VarArgs do Stack[A + Index] = VarArg[Index]; end; for I = Top + 1, StackSize do Stack[I] = nil; end;end;elseif (Enum <= 73) then if (Enum <= 70) then if (Enum == 69) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum <= 70) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;elseif (Enum <= 71) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum > 72) then Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Instruction[OP_C]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 73) then  local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end;end;elseif (Enum <= 75) then if (Enum > 74) then local A = Instruction[OP_A]; local B = Stack[Instruction[OP_B]]; Stack[A + 1] = B; Stack[A] = B[Stack[Instruction[OP_C]]];elseif (Enum < 75) then  Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]];end;elseif (Enum <= 76) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]];elseif (Enum > 77) then Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; elseif (Enum < 78) then  Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]][Instruction[OP_B]] = Stack[Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E]; local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Environment[Instruction[OP_B]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Instruction[OP_C]]; Instruction = Instruction[OP_E]; Stack[Instruction[OP_A]] = Instruction[OP_B]; Instruction = Instruction[OP_E];  Instruction = Instruction[OP_E]; end;  					end; 				end); 			end;  			  			return Wrap(Deserialize(), {}, GetFEnv())(...);  end)(({[((557686557 - #("string here......>.")))]=((90));["ORvOoOs"]=(((#{(function(...)return ...;end)(0x3CE,0x1B3,418,0x25B)} + 667868)));[((#{755;} + 772526532))]=("\110");[((#{430;} + 981534029))]=((0x000));["kJihgZD"]=(((#{(function(...)return ;end)()} + 455457869)));['usciaBecQ6']=((165));[(0x3A7979C6)]=((7));[(0x128039FD)]=((57));["nh2emuUV"]=((2047));[((112469807 - #("string here......>.")))]=(((25 - #("string here......>."))));[((#{293;} + 0x215B19EB))]=(((#{514;88;0x344;} + 0x377F3BE5)));[((103949181 - #("string here......>.")))]=("\115");[(0x22013650)]=(((#{338;232;} + 672095649)));[((#{0x151;633;835;} + 0x15202EC3))]=("\100");[(550419510)]=(((160594 - #("string here......>."))));["bV1AyWX"]=((773634));[((#{0x3B8;0x073;291;(function(...)return 0x298,0x2D9,...;end)(329,0x37D)} + 186411744))]=("\116");[(34166784)]=((411261201));[(0x2342049C)]=("\102");fnHRkOY8=("\111");[((#{0x392;498;} + 522735657))]=("\117");[((522600470 - #("string here......>.")))]=((0x3B8C157D));PP0X5Ups=((4));['B6B9le']=("\119");[((645560869 - #("string here......>.")))]=((0x100));[((42067096 - #("string here......>.")))]=((1023));[(0x343AC63E)]=((31));eW5I0V0i0P=((3));[(0x9E1C100)]=((36));[((#{0x388;} + 0x1F10202F))]=(((#{243;837;0x2B6;0x382;(function(...)return 872,639,682;end)()} + 591529109)));[(211566566)]=(((#{(function(...)return 0x0AE,0x35B;end)()} + 0x367B42E)));[(0x38D99DF1)]=(((354430681 - #("string here......>."))));["TnxkG9OGgm"]=(((#{80;} + 0x13367D20)));[((#{} + 0x69539FA))]=(((#{444;0x169;(function(...)return 532,0x09D,...;end)(0x334,0x296,0x342,0x1C6)} + 0x025)));['D0RxU4yc4f']=(((51 - #("string here......>."))));['QUmY70Z']=((772526533));["Zx2T0RdIZ"]=(((#{0x018;0x354;(function(...)return 648;end)()} + 16777213)));[(322338081)]=("\105");[(0x8A64A40)]=((0x005));['iFsQSa']=((2));["hgwaqt"]=(((103949181 - #("string here......>."))));[(362819912)]=(((71 - #("string here......>."))));[((20035990 - #("string here......>.")))]=(((38 - #("string here......>."))));["zcLUW"]=("\108");[(0x280F5DA3)]=("\99");[(0x36668D95)]=("\114");["ubHvtPq1"]=((0x36668D95));[(939172564)]=(((45 - #("string here......>."))));[((455457888 - #("string here......>.")))]=("\109");[(0x31885D3F)]=("\112");["RFHM4HaBw"]=("\97");TjnI4SE=(((917995 - #("string here......>."))));OomTl=((0x015));['ZgIh56Mpo']=(((#{0x248;0x29E;0x1A9;} + 0x31885D3C)));[((411261220 - #("string here......>.")))]=("\120");[(0x242B74A3)]=((0x1388));[(0x2849E0BF)]=(((46 - #("string here......>."))));[((#{544;0x2A8;0x2F0;(function(...)return 405;end)()} + 0x20B894C1))]=(((65555 - #("string here......>."))));[((57128003 - #("string here......>.")))]=("\50");[(621436154)]=((0x0F8));[(884103177)]=(((39 - #("string here......>."))));[(0x10DED519)]=("\101");W7ehymskh=(((#{} + 9)));['xPr4Ac']=(((201 - #("string here......>."))));[(286509956)]=((0x10DED519));['NOnfS']=((0xB1C6AE7));[((154852040 - #("string here......>.")))]=(((#{0x371;708;0x103;0x0C4;} + 0x004)));["t0UtO"]=("\98");["C0o1X"]=("\121");["hPQ0TXsx5O"]=("\107");[(0x377F3BE8)]=("\51");[((#{0x29B;} + 0x35683D6D))]=(((#{925;0x26F;0x3DF;} + 452822)));[((999036304 - #("string here......>.")))]=("\104");[(0x1BA0F076)]=((0x1F28502B));[(0x1D7E184A)]=((1));}), ...);
